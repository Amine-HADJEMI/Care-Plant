d9efa33534461f9e7feb9f34c70ec690
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _AnimatedColor = _interopRequireDefault(require("./nodes/AnimatedColor"));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _require = require("./AnimatedEvent"),
  AnimatedEvent = _require.AnimatedEvent,
  attachNativeEvent = _require.attachNativeEvent;
var AnimatedImplementation = require("./AnimatedImplementation");
var AnimatedInterpolation = require("./nodes/AnimatedInterpolation");
var AnimatedNode = require("./nodes/AnimatedNode");
var AnimatedValue = require("./nodes/AnimatedValue");
var AnimatedValueXY = require("./nodes/AnimatedValueXY");
var createAnimatedComponent = require("./createAnimatedComponent");
var inAnimationCallback = false;
function mockAnimationStart(start) {
  return function (callback) {
    var guardedCallback = callback == null ? callback : function () {
      if (inAnimationCallback) {
        console.warn('Ignoring recursive animation callback when running mock animations');
        return;
      }
      inAnimationCallback = true;
      try {
        callback.apply(void 0, arguments);
      } finally {
        inAnimationCallback = false;
      }
    };
    start(guardedCallback);
  };
}
var emptyAnimation = {
  start: function start() {},
  stop: function stop() {},
  reset: function reset() {},
  _startNativeLoop: function _startNativeLoop() {},
  _isUsingNativeDriver: function _isUsingNativeDriver() {
    return false;
  }
};
var mockCompositeAnimation = function mockCompositeAnimation(animations) {
  return _objectSpread(_objectSpread({}, emptyAnimation), {}, {
    start: mockAnimationStart(function (callback) {
      animations.forEach(function (animation) {
        return animation.start();
      });
      callback == null ? void 0 : callback({
        finished: true
      });
    })
  });
};
var spring = function spring(value, config) {
  var anyValue = value;
  return _objectSpread(_objectSpread({}, emptyAnimation), {}, {
    start: mockAnimationStart(function (callback) {
      anyValue.setValue(config.toValue);
      callback == null ? void 0 : callback({
        finished: true
      });
    })
  });
};
var timing = function timing(value, config) {
  var anyValue = value;
  return _objectSpread(_objectSpread({}, emptyAnimation), {}, {
    start: mockAnimationStart(function (callback) {
      anyValue.setValue(config.toValue);
      callback == null ? void 0 : callback({
        finished: true
      });
    })
  });
};
var decay = function decay(value, config) {
  return emptyAnimation;
};
var sequence = function sequence(animations) {
  return mockCompositeAnimation(animations);
};
var parallel = function parallel(animations, config) {
  return mockCompositeAnimation(animations);
};
var delay = function delay(time) {
  return emptyAnimation;
};
var stagger = function stagger(time, animations) {
  return mockCompositeAnimation(animations);
};
var loop = function loop(animation) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    _ref$iterations = _ref.iterations,
    iterations = _ref$iterations === void 0 ? -1 : _ref$iterations;
  return emptyAnimation;
};
module.exports = {
  Value: AnimatedValue,
  ValueXY: AnimatedValueXY,
  Color: _AnimatedColor.default,
  Interpolation: AnimatedInterpolation,
  Node: AnimatedNode,
  decay: decay,
  timing: timing,
  spring: spring,
  add: AnimatedImplementation.add,
  subtract: AnimatedImplementation.subtract,
  divide: AnimatedImplementation.divide,
  multiply: AnimatedImplementation.multiply,
  modulo: AnimatedImplementation.modulo,
  diffClamp: AnimatedImplementation.diffClamp,
  delay: delay,
  sequence: sequence,
  parallel: parallel,
  stagger: stagger,
  loop: loop,
  event: AnimatedImplementation.event,
  createAnimatedComponent: createAnimatedComponent,
  attachNativeEvent: attachNativeEvent,
  forkEvent: AnimatedImplementation.forkEvent,
  unforkEvent: AnimatedImplementation.unforkEvent,
  Event: AnimatedEvent
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,