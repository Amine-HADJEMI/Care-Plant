f52259d186973caf5c8dbf7c7c3acadf
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var PixelRatio = require("../Utilities/PixelRatio");
var _require = require("./AssetUtils"),
  pickScale = _require.pickScale;
var Platform = require("../Utilities/Platform");
var invariant = require('invariant');
var _require2 = require('@react-native/assets/path-support'),
  getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,
  getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,
  getBasePath = _require2.getBasePath;
function getScaledAssetPath(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}
function getAssetPathInDrawableFolder(asset) {
  var scale = pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = getAndroidResourceFolderName(asset, scale);
  var fileName = getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}
var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {
    (0, _classCallCheck2.default)(this, AssetSourceResolver);
    this.serverUrl = serverUrl;
    this.jsbundleUrl = jsbundleUrl;
    this.asset = asset;
  }
  (0, _createClass2.default)(AssetSourceResolver, [{
    key: "isLoadedFromServer",
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: "isLoadedFromFileSystem",
    value: function isLoadedFromFileSystem() {
      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));
    }
  }, {
    key: "defaultAsset",
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }
      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetURLNearBundle();
      }
    }
  }, {
    key: "assetServerURL",
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: "scaledAssetPath",
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: "scaledAssetURLNearBundle",
    value: function scaledAssetURLNearBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\.\.\//g, '_'));
    }
  }, {
    key: "resourceIdentifierWithoutScale",
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: "drawableFolderInBundle",
    value: function drawableFolderInBundle() {
      var path = this.jsbundleUrl || 'file://';
      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: "fromSource",
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }]);
  return AssetSourceResolver;
}();
AssetSourceResolver.pickScale = pickScale;
module.exports = AssetSourceResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiUGl4ZWxSYXRpbyIsIl9yZXF1aXJlIiwicGlja1NjYWxlIiwiUGxhdGZvcm0iLCJpbnZhcmlhbnQiLCJfcmVxdWlyZTIiLCJnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lIiwiZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllciIsImdldEJhc2VQYXRoIiwiZ2V0U2NhbGVkQXNzZXRQYXRoIiwiYXNzZXQiLCJzY2FsZSIsInNjYWxlcyIsImdldCIsInNjYWxlU3VmZml4IiwiYXNzZXREaXIiLCJuYW1lIiwidHlwZSIsImdldEFzc2V0UGF0aEluRHJhd2FibGVGb2xkZXIiLCJkcmF3YmxlRm9sZGVyIiwiZmlsZU5hbWUiLCJBc3NldFNvdXJjZVJlc29sdmVyIiwic2VydmVyVXJsIiwianNidW5kbGVVcmwiLCJkZWZhdWx0Iiwia2V5IiwidmFsdWUiLCJpc0xvYWRlZEZyb21TZXJ2ZXIiLCJpc0xvYWRlZEZyb21GaWxlU3lzdGVtIiwic3RhcnRzV2l0aCIsImRlZmF1bHRBc3NldCIsImFzc2V0U2VydmVyVVJMIiwiT1MiLCJkcmF3YWJsZUZvbGRlckluQnVuZGxlIiwicmVzb3VyY2VJZGVudGlmaWVyV2l0aG91dFNjYWxlIiwic2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlIiwiZnJvbVNvdXJjZSIsImhhc2giLCJzY2FsZWRBc3NldFBhdGgiLCJwYXRoIiwicmVwbGFjZSIsInNvdXJjZSIsIl9fcGFja2FnZXJfYXNzZXQiLCJ3aWR0aCIsImhlaWdodCIsInVyaSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJBc3NldFNvdXJjZVJlc29sdmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IHR5cGUgUmVzb2x2ZWRBc3NldFNvdXJjZSA9IHt8XG4gICtfX3BhY2thZ2VyX2Fzc2V0OiBib29sZWFuLFxuICArd2lkdGg6ID9udW1iZXIsXG4gICtoZWlnaHQ6ID9udW1iZXIsXG4gICt1cmk6IHN0cmluZyxcbiAgK3NjYWxlOiBudW1iZXIsXG58fTtcblxuaW1wb3J0IHR5cGUge1BhY2thZ2VyQXNzZXR9IGZyb20gJ0ByZWFjdC1uYXRpdmUvYXNzZXRzL3JlZ2lzdHJ5JztcblxuY29uc3QgUGl4ZWxSYXRpbyA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QaXhlbFJhdGlvJyk7XG5jb25zdCB7cGlja1NjYWxlfSA9IHJlcXVpcmUoJy4vQXNzZXRVdGlscycpO1xuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmNvbnN0IHtcbiAgZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSxcbiAgZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcixcbiAgZ2V0QmFzZVBhdGgsXG59ID0gcmVxdWlyZSgnQHJlYWN0LW5hdGl2ZS9hc3NldHMvcGF0aC1zdXBwb3J0Jyk7XG5cbi8qKlxuICogUmV0dXJucyBhIHBhdGggbGlrZSAnYXNzZXRzL0F3ZXNvbWVNb2R1bGUvaWNvbkAyeC5wbmcnXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlZEFzc2V0UGF0aChhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIGNvbnN0IHNjYWxlID0gcGlja1NjYWxlKGFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSk7XG4gIGNvbnN0IHNjYWxlU3VmZml4ID0gc2NhbGUgPT09IDEgPyAnJyA6ICdAJyArIHNjYWxlICsgJ3gnO1xuICBjb25zdCBhc3NldERpciA9IGdldEJhc2VQYXRoKGFzc2V0KTtcbiAgcmV0dXJuIGFzc2V0RGlyICsgJy8nICsgYXNzZXQubmFtZSArIHNjYWxlU3VmZml4ICsgJy4nICsgYXNzZXQudHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcGF0aCBsaWtlICdkcmF3YWJsZS1tZHBpL2ljb24ucG5nJ1xuICovXG5mdW5jdGlvbiBnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyKGFzc2V0OiBQYWNrYWdlckFzc2V0KTogc3RyaW5nIHtcbiAgY29uc3Qgc2NhbGUgPSBwaWNrU2NhbGUoYXNzZXQuc2NhbGVzLCBQaXhlbFJhdGlvLmdldCgpKTtcbiAgY29uc3QgZHJhd2JsZUZvbGRlciA9IGdldEFuZHJvaWRSZXNvdXJjZUZvbGRlck5hbWUoYXNzZXQsIHNjYWxlKTtcbiAgY29uc3QgZmlsZU5hbWUgPSBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKGFzc2V0KTtcbiAgcmV0dXJuIGRyYXdibGVGb2xkZXIgKyAnLycgKyBmaWxlTmFtZSArICcuJyArIGFzc2V0LnR5cGU7XG59XG5cbmNsYXNzIEFzc2V0U291cmNlUmVzb2x2ZXIge1xuICBzZXJ2ZXJVcmw6ID9zdHJpbmc7XG4gIC8vIHdoZXJlIHRoZSBqc2J1bmRsZSBpcyBiZWluZyBydW4gZnJvbVxuICBqc2J1bmRsZVVybDogP3N0cmluZztcbiAgLy8gdGhlIGFzc2V0IHRvIHJlc29sdmVcbiAgYXNzZXQ6IFBhY2thZ2VyQXNzZXQ7XG5cbiAgY29uc3RydWN0b3Ioc2VydmVyVXJsOiA/c3RyaW5nLCBqc2J1bmRsZVVybDogP3N0cmluZywgYXNzZXQ6IFBhY2thZ2VyQXNzZXQpIHtcbiAgICB0aGlzLnNlcnZlclVybCA9IHNlcnZlclVybDtcbiAgICB0aGlzLmpzYnVuZGxlVXJsID0ganNidW5kbGVVcmw7XG4gICAgdGhpcy5hc3NldCA9IGFzc2V0O1xuICB9XG5cbiAgaXNMb2FkZWRGcm9tU2VydmVyKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMuc2VydmVyVXJsO1xuICB9XG5cbiAgaXNMb2FkZWRGcm9tRmlsZVN5c3RlbSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEodGhpcy5qc2J1bmRsZVVybCAmJiB0aGlzLmpzYnVuZGxlVXJsLnN0YXJ0c1dpdGgoJ2ZpbGU6Ly8nKSk7XG4gIH1cblxuICBkZWZhdWx0QXNzZXQoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaWYgKHRoaXMuaXNMb2FkZWRGcm9tU2VydmVyKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmFzc2V0U2VydmVyVVJMKCk7XG4gICAgfVxuXG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmlzTG9hZGVkRnJvbUZpbGVTeXN0ZW0oKVxuICAgICAgICA/IHRoaXMuZHJhd2FibGVGb2xkZXJJbkJ1bmRsZSgpXG4gICAgICAgIDogdGhpcy5yZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuc2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYWJzb2x1dGUgVVJMIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZldGNoIHRoZSBhc3NldFxuICAgKiBmcm9tIHRoZSBkZXZzZXJ2ZXJcbiAgICovXG4gIGFzc2V0U2VydmVyVVJMKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGludmFyaWFudCghIXRoaXMuc2VydmVyVXJsLCAnbmVlZCBzZXJ2ZXIgdG8gbG9hZCBmcm9tJyk7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShcbiAgICAgIHRoaXMuc2VydmVyVXJsICtcbiAgICAgICAgZ2V0U2NhbGVkQXNzZXRQYXRoKHRoaXMuYXNzZXQpICtcbiAgICAgICAgJz9wbGF0Zm9ybT0nICtcbiAgICAgICAgUGxhdGZvcm0uT1MgK1xuICAgICAgICAnJmhhc2g9JyArXG4gICAgICAgIHRoaXMuYXNzZXQuaGFzaCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc29sdmVzIHRvIGp1c3QgdGhlIHNjYWxlZCBhc3NldCBmaWxlbmFtZVxuICAgKiBFLmcuICdhc3NldHMvQXdlc29tZU1vZHVsZS9pY29uQDJ4LnBuZydcbiAgICovXG4gIHNjYWxlZEFzc2V0UGF0aCgpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKGdldFNjYWxlZEFzc2V0UGF0aCh0aGlzLmFzc2V0KSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdG8gd2hlcmUgdGhlIGJ1bmRsZSBpcyBydW5uaW5nIGZyb20sIHdpdGggYSBzY2FsZWQgYXNzZXQgZmlsZW5hbWVcbiAgICogRS5nLiAnZmlsZTovLy9zZGNhcmQvYnVuZGxlL2Fzc2V0cy9Bd2Vzb21lTW9kdWxlL2ljb25AMngucG5nJ1xuICAgKi9cbiAgc2NhbGVkQXNzZXRVUkxOZWFyQnVuZGxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmpzYnVuZGxlVXJsIHx8ICdmaWxlOi8vJztcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKFxuICAgICAgLy8gQXNzZXRzIGNhbiBoYXZlIHJlbGF0aXZlIHBhdGhzIG91dHNpZGUgb2YgdGhlIHByb2plY3Qgcm9vdC5cbiAgICAgIC8vIFdoZW4gYnVuZGxpbmcgdGhlbSB3ZSByZXBsYWNlIGAuLi9gIHdpdGggYF9gIHRvIG1ha2Ugc3VyZSB0aGV5XG4gICAgICAvLyBkb24ndCBlbmQgdXAgb3V0c2lkZSBvZiB0aGUgZXhwZWN0ZWQgYXNzZXRzIGRpcmVjdG9yeS5cbiAgICAgIHBhdGggKyBnZXRTY2FsZWRBc3NldFBhdGgodGhpcy5hc3NldCkucmVwbGFjZSgvXFwuXFwuXFwvL2csICdfJyksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCBsb2NhdGlvbiBvZiBhc3NldHMgYnVuZGxlZCB3aXRoIHRoZSBhcHAsIGxvY2F0ZWQgYnlcbiAgICogcmVzb3VyY2UgaWRlbnRpZmllclxuICAgKiBUaGUgQW5kcm9pZCByZXNvdXJjZSBzeXN0ZW0gcGlja3MgdGhlIGNvcnJlY3Qgc2NhbGUuXG4gICAqIEUuZy4gJ2Fzc2V0c19hd2Vzb21lbW9kdWxlX2ljb24nXG4gICAqL1xuICByZXNvdXJjZUlkZW50aWZpZXJXaXRob3V0U2NhbGUoKTogUmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyxcbiAgICAgICdyZXNvdXJjZSBpZGVudGlmaWVycyB3b3JrIG9uIEFuZHJvaWQnLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuZnJvbVNvdXJjZShnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUganNidW5kbGUgaXMgcnVubmluZyBmcm9tIGEgc2lkZWxvYWQgbG9jYXRpb24sIHRoaXMgcmVzb2x2ZXMgYXNzZXRzXG4gICAqIHJlbGF0aXZlIHRvIGl0cyBsb2NhdGlvblxuICAgKiBFLmcuICdmaWxlOi8vL3NkY2FyZC9Bd2Vzb21lTW9kdWxlL2RyYXdhYmxlLW1kcGkvaWNvbi5wbmcnXG4gICAqL1xuICBkcmF3YWJsZUZvbGRlckluQnVuZGxlKCk6IFJlc29sdmVkQXNzZXRTb3VyY2Uge1xuICAgIGNvbnN0IHBhdGggPSB0aGlzLmpzYnVuZGxlVXJsIHx8ICdmaWxlOi8vJztcbiAgICByZXR1cm4gdGhpcy5mcm9tU291cmNlKHBhdGggKyBnZXRBc3NldFBhdGhJbkRyYXdhYmxlRm9sZGVyKHRoaXMuYXNzZXQpKTtcbiAgfVxuXG4gIGZyb21Tb3VyY2Uoc291cmNlOiBzdHJpbmcpOiBSZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgX19wYWNrYWdlcl9hc3NldDogdHJ1ZSxcbiAgICAgIHdpZHRoOiB0aGlzLmFzc2V0LndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmFzc2V0LmhlaWdodCxcbiAgICAgIHVyaTogc291cmNlLFxuICAgICAgc2NhbGU6IHBpY2tTY2FsZSh0aGlzLmFzc2V0LnNjYWxlcywgUGl4ZWxSYXRpby5nZXQoKSksXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBwaWNrU2NhbGU6IChzY2FsZXM6IEFycmF5PG51bWJlcj4sIGRldmljZVNjYWxlPzogbnVtYmVyKSA9PiBudW1iZXIgPVxuICAgIHBpY2tTY2FsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBc3NldFNvdXJjZVJlc29sdmVyO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDLElBQUFBLHNCQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxnQkFBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBQUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBWWIsSUFBTUcsVUFBVSxHQUFHSCxPQUFPLDJCQUEyQjtBQUNyRCxJQUFBSSxRQUFBLEdBQW9CSixPQUFPLGdCQUFnQjtFQUFwQ0ssU0FBUyxHQUFBRCxRQUFBLENBQVRDLFNBQVM7QUFDaEIsSUFBTUMsUUFBUSxHQUFHTixPQUFPLHlCQUF5QjtBQUVqRCxJQUFNTyxTQUFTLEdBQUdQLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFFdEMsSUFBQVEsU0FBQSxHQUlJUixPQUFPLENBQUMsbUNBQW1DLENBQUM7RUFIOUNTLDRCQUE0QixHQUFBRCxTQUFBLENBQTVCQyw0QkFBNEI7RUFDNUJDLDRCQUE0QixHQUFBRixTQUFBLENBQTVCRSw0QkFBNEI7RUFDNUJDLFdBQVcsR0FBQUgsU0FBQSxDQUFYRyxXQUFXO0FBTWIsU0FBU0Msa0JBQWtCQSxDQUFDQyxLQUFvQixFQUFVO0VBQ3hELElBQU1DLEtBQUssR0FBR1QsU0FBUyxDQUFDUSxLQUFL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