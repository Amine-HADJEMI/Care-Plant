1030564a5844532fc4ffc148ada55d87
'use strict';
function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return object;
    }
    var keys = Object.keys(object);
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (_hasOwnProperty.call(object, key)) {
        Object.defineProperty(object, key, {
          get: identity.bind(null, object[key])
        });
        Object.defineProperty(object, key, {
          set: throwOnImmutableMutation.bind(null, key)
        });
      }
    }
    Object.freeze(object);
    Object.seal(object);
    for (var _i = 0; _i < keys.length; _i++) {
      var _key = keys[_i];
      if (_hasOwnProperty.call(object, _key)) {
        deepFreezeAndThrowOnMutationInDev(object[_key]);
      }
    }
  }
  return object;
}
function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}
function identity(value) {
  return value;
}
module.exports = deepFreezeAndThrowOnMutationInDev;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJvYmplY3QiLCJfX0RFVl9fIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJpc1NlYWxlZCIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJrZXkiLCJjYWxsIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJpZGVudGl0eSIsImJpbmQiLCJzZXQiLCJ0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24iLCJmcmVlemUiLCJzZWFsIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSWYgeW91ciBhcHBsaWNhdGlvbiBpcyBhY2NlcHRpbmcgZGlmZmVyZW50IHZhbHVlcyBmb3IgdGhlIHNhbWUgZmllbGQgb3ZlclxuICogdGltZSBhbmQgaXMgZG9pbmcgYSBkaWZmIG9uIHRoZW0sIHlvdSBjYW4gZWl0aGVyICgxKSBjcmVhdGUgYSBjb3B5IG9yXG4gKiAoMikgZW5zdXJlIHRoYXQgdGhvc2UgdmFsdWVzIGFyZSBub3QgbXV0YXRlZCBiZWhpbmQgdHdvIHBhc3Nlcy5cbiAqIFRoaXMgZnVuY3Rpb24gaGVscHMgeW91IHdpdGggKDIpIGJ5IGZyZWV6aW5nIHRoZSBvYmplY3QgYW5kIHRocm93aW5nIGlmXG4gKiB0aGUgdXNlciBzdWJzZXF1ZW50bHkgbW9kaWZpZXMgdGhlIHZhbHVlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gY2F2ZWF0cyB3aXRoIHRoaXMgZnVuY3Rpb246XG4gKiAgIC0gSWYgdGhlIGNhbGwgc2l0ZSBpcyBub3QgaW4gc3RyaWN0IG1vZGUsIGl0IHdpbGwgb25seSB0aHJvdyB3aGVuXG4gKiAgICAgbXV0YXRpbmcgZXhpc3RpbmcgZmllbGRzLCBhZGRpbmcgYSBuZXcgb25lXG4gKiAgICAgd2lsbCB1bmZvcnR1bmF0ZWx5IGZhaWwgc2lsZW50bHkgOihcbiAqICAgLSBJZiB0aGUgb2JqZWN0IGlzIGFscmVhZHkgZnJvemVuIG9yIHNlYWxlZCwgaXQgd2lsbCBub3QgY29udGludWUgdGhlXG4gKiAgICAgZGVlcCB0cmF2ZXJzYWwgYW5kIHdpbGwgbGVhdmUgbGVhZiBub2RlcyB1bmZyb3plbi5cbiAqXG4gKiBGcmVlemluZyB0aGUgb2JqZWN0IGFuZCBhZGRpbmcgdGhlIHRocm93IG1lY2hhbmlzbSBpcyBleHBlbnNpdmUgYW5kIHdpbGxcbiAqIG9ubHkgYmUgdXNlZCBpbiBERVYuXG4gKi9cbmZ1bmN0aW9uIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjxUOiB7Li4ufSB8IEFycmF5PG1peGVkPj4oXG4gIG9iamVjdDogVCxcbik6IFQge1xuICBpZiAoX19ERVZfXykge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnIHx8XG4gICAgICBvYmplY3QgPT09IG51bGwgfHxcbiAgICAgIE9iamVjdC5pc0Zyb3plbihvYmplY3QpIHx8XG4gICAgICBPYmplY3QuaXNTZWFsZWQob2JqZWN0KVxuICAgICkge1xuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvLyAkRmxvd0ZpeE1lW25vdC1hbi1vYmplY3RdIGBvYmplY3RgIGNhbiBiZSBhbiBhcnJheSwgYnV0IE9iamVjdC5rZXlzIHdvcmtzIHdpdGggYXJyYXlzIHRvb1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cygob2JqZWN0OiB7Li4ufSB8IEFycmF5PG1peGVkPikpO1xuICAgIC8vICRGbG93Rml4TWVbbWV0aG9kLXVuYmluZGluZ10gYWRkZWQgd2hlbiBpbXByb3ZpbmcgdHlwaW5nIGZvciB0aGlzIHBhcmFtZXRlcnNcbiAgICBjb25zdCBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwga2V5LCB7XG4gICAgICAgICAgZ2V0OiBpZGVudGl0eS5iaW5kKG51bGwsIG9iamVjdFtrZXldKSxcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgIHNldDogdGhyb3dPbkltbXV0YWJsZU11dGF0aW9uLmJpbmQobnVsbCwga2V5KSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgT2JqZWN0LmZyZWV6ZShvYmplY3QpO1xuICAgIE9iamVjdC5zZWFsKG9iamVjdCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgICAgZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2KG9iamVjdFtrZXldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLyogJEZsb3dGaXhNZVttaXNzaW5nLWxvY2FsLWFubm90XSBUaGUgdHlwZSBhbm5vdGF0aW9uKHMpIHJlcXVpcmVkIGJ5IEZsb3cnc1xuICogTFRJIHVwZGF0ZSBjb3VsZCBub3QgYmUgYWRkZWQgdmlhIGNvZGVtb2QgKi9cbmZ1bmN0aW9uIHRocm93T25JbW11dGFibGVNdXRhdGlvbihrZXk6IGVtcHR5LCB2YWx1ZSkge1xuICB0aHJvdyBFcnJvcihcbiAgICAnWW91IGF0dGVtcHRlZCB0byBzZXQgdGhlIGtleSBgJyArXG4gICAgICBrZXkgK1xuICAgICAgJ2Agd2l0aCB0aGUgdmFsdWUgYCcgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsdWUpICtcbiAgICAgICdgIG9uIGFuIG9iamVjdCB0aGF0IGlzIG1lYW50IHRvIGJlIGltbXV0YWJsZSAnICtcbiAgICAgICdhbmQgaGFzIGJlZW4gZnJvemVuLicsXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlOiBtaXhlZCkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2O1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZO0FBbUJaLFNBQVNBLGlDQUFpQ0EsQ0FDeENDLE1BQVMsRUFDTjtFQUNILElBQUlDLE9BQU8sRUFBRTtJQUNYLElBQ0UsT0FBT0QsTUFBTSxLQUFLLFFBQVEsSUFDMUJBLE1BQU0sS0FBSyxJQUFJLElBQ2ZFLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDSCxNQUFNLENBQUMsSUFDdkJFLE1BQU0sQ0FBQ0UsUUFBUSxDQUFDSixNQUFNLENBQUMsRUFDdkI7TUFDQSxPQUFPQSxNQUFNO0lBQ2Y7SUFHQSxJQUFNSyxJQUFJLEdBQUdILE1BQU0sQ0FBQ0csSUFBSSxDQUFFTCxNQUFNLENBQXdCO0lBRXhELElBQU1NLGVBQWMsR0FBR0osTUFBTSxDQUFDSyxTQUFTLENBQUNELGNBQWM7SUFFdEQsS0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdILElBQUksQ0FBQ0ksTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRTtNQUNwQyxJQUFNRSxHQUFHLEdBQUdMLElBQUksQ0FBQ0csQ0FBQyxDQUFDO01BQ25CLElBQUlGLGVBQWMsQ0FBQ0ssSUFBSSxDQUFDWCxNQUFNLEVBQUVVLEdBQUcsQ0FBQyxFQUFFO1FBQ3BDUixNQUFNLENBQUNVLGNBQWMsQ0FBQ1osTUFBTSxFQUFFVSxHQUFHLEVBQUU7VUFDakNHLEdBQUcsRUFBRUMsUUFBUSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFZixNQUFNLENBQUNVLEdBQUcsQ0FBQztRQUN0QyxDQUFDLENBQUM7UUFDRlIsTUFBTSxDQUFDVSxjQUFjLENBQUNaLE1BQU0sRUFBRVUsR0FBRyxFQUFFO1VBQ2pDTSxHQUFHLEVBQUVDLHdCQUF3QixDQUFDRixJQUFJLENBQUMsSUFBSSxFQUFFTCxHQUFHO1FBQzlDLENBQUMsQ0FBQztNQUNKO0lBQ0Y7SUFFQVIsTUFBTSxDQUFDZ0IsTUFBTSxDQUFDbEIsTUFBTSxDQUFDO0lBQ3JCRSxNQUFNLENBQUNpQixJQUFJLENBQUNuQixNQUFNLENBQUM7SUFFbkIsS0FBSyxJQUFJUSxFQUFDLEdBQUcsQ0FBQyxFQUFFQSxFQUFDLEdBQUdILElBQUksQ0FBQ0ksTUFBTSxFQUFFRCxFQUFDLEVBQUUsRUFBRTtNQUNwQyxJQUFNRSxJQUFHLEdBQUdMLElBQUksQ0FBQ0csRUFBQyxDQUFDO01BQ25CLElBQUlGLGVBQWMsQ0FBQ0ssSUFBSSxDQUFDWCxNQUFNLEVBQUVVLElBQUcsQ0FBQyxFQUFFO1FBQ3BDWCxpQ0FBaUMsQ0FBQ0MsTUFBTSxDQUFDVSxJQUFHLENBQUMsQ0FBQztNQUNoRDtJQUNGO0VBQ0Y7RUFDQSxPQUFPVixNQUFNO0FBQ2Y7QUFJQSxTQUFTaUIsd0JBQXdCQSxDQUFDUCxHQUFVLEVBQUVVLEtBQUssRUFBRTtFQUNuRCxNQUFNQyxLQUFLLENBQ1QsZ0NBQWdDLEdBQzlCWCxHQUFHLEdBQ0gsb0JBQW9CLEdBQ3BCWSxJQUFJLENBQUNDLFNBQVMsQ0FBQ0gsS0FBSyxDQUFDLEdBQ3JCLCtDQUErQyxHQUMvQyxzQkFBc0IsQ0FDekI7QUFDSDtBQUVBLFNBQVNOLFFBQVFBLENBQUNNLEtBQVksRUFBRTtFQUM5QixPQUFPQSxLQUFLO0FBQ2Q7QUFFQUksTUFBTSxDQUFDQyxPQUFPLEdBQUcxQixpQ0FBaUMifQ==