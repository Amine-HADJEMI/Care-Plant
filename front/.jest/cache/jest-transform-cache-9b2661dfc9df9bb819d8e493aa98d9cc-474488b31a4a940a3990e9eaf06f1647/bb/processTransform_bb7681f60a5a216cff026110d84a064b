7aab07f50d02635e67017ef4ff3dab27
'use strict';

var MatrixMath = require("../Utilities/MatrixMath");
var Platform = require("../Utilities/Platform");
var invariant = require('invariant');
var stringifySafe = require("../Utilities/stringifySafe").default;
function processTransform(transform) {
  if (__DEV__) {
    _validateTransforms(transform);
  }
  if (Platform.OS === 'android' || Platform.OS === 'ios') {
    return transform;
  }
  var result = MatrixMath.createIdentityMatrix();
  transform.forEach(function (transformation) {
    var key = Object.keys(transformation)[0];
    var value = transformation[key];
    switch (key) {
      case 'matrix':
        MatrixMath.multiplyInto(result, result, value);
        break;
      case 'perspective':
        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);
        break;
      case 'rotateX':
        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);
        break;
      case 'rotateY':
        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);
        break;
      case 'rotate':
      case 'rotateZ':
        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);
        break;
      case 'scale':
        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);
        break;
      case 'scaleX':
        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);
        break;
      case 'scaleY':
        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);
        break;
      case 'translate':
        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);
        break;
      case 'translateX':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);
        break;
      case 'translateY':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);
        break;
      case 'skewX':
        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);
        break;
      case 'skewY':
        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);
        break;
      default:
        throw new Error('Invalid transform name: ' + key);
    }
  });
  return result;
}
function _multiplyTransform(result, matrixMathFunction, args) {
  var matrixToApply = MatrixMath.createIdentityMatrix();
  var argsWithIdentity = [matrixToApply].concat(args);
  matrixMathFunction.apply(this, argsWithIdentity);
  MatrixMath.multiplyInto(result, result, matrixToApply);
}
function _convertToRadians(value) {
  var floatValue = parseFloat(value);
  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
}
function _validateTransforms(transform) {
  transform.forEach(function (transformation) {
    var keys = Object.keys(transformation);
    invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
    var key = keys[0];
    var value = transformation[key];
    _validateTransform(key, value, transformation);
  });
}
function _validateTransform(key, value, transformation) {
  invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');
  var multivalueTransforms = ['matrix', 'translate'];
  if (multivalueTransforms.indexOf(key) !== -1) {
    invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
  }
  switch (key) {
    case 'matrix':
      invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'translate':
      invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'rotateX':
    case 'rotateY':
    case 'rotateZ':
    case 'rotate':
    case 'skewX':
    case 'skewY':
      invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
      invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
      break;
    case 'perspective':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
      break;
    case 'translateX':
    case 'translateY':
    case 'scale':
    case 'scaleX':
    case 'scaleY':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      break;
    default:
      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
  }
}
module.exports = processTransform;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXhNYXRoIiwicmVxdWlyZSIsIlBsYXRmb3JtIiwiaW52YXJpYW50Iiwic3RyaW5naWZ5U2FmZSIsImRlZmF1bHQiLCJwcm9jZXNzVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiX19ERVZfXyIsIl92YWxpZGF0ZVRyYW5zZm9ybXMiLCJPUyIsInJlc3VsdCIsImNyZWF0ZUlkZW50aXR5TWF0cml4IiwiZm9yRWFjaCIsInRyYW5zZm9ybWF0aW9uIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsInZhbHVlIiwibXVsdGlwbHlJbnRvIiwiX211bHRpcGx5VHJhbnNmb3JtIiwicmV1c2VQZXJzcGVjdGl2ZUNvbW1hbmQiLCJyZXVzZVJvdGF0ZVhDb21tYW5kIiwiX2NvbnZlcnRUb1JhZGlhbnMiLCJyZXVzZVJvdGF0ZVlDb21tYW5kIiwicmV1c2VSb3RhdGVaQ29tbWFuZCIsInJldXNlU2NhbGVDb21tYW5kIiwicmV1c2VTY2FsZVhDb21tYW5kIiwicmV1c2VTY2FsZVlDb21tYW5kIiwicmV1c2VUcmFuc2xhdGUzZENvbW1hbmQiLCJyZXVzZVRyYW5zbGF0ZTJkQ29tbWFuZCIsInJldXNlU2tld1hDb21tYW5kIiwicmV1c2VTa2V3WUNvbW1hbmQiLCJFcnJvciIsIm1hdHJpeE1hdGhGdW5jdGlvbiIsImFyZ3MiLCJtYXRyaXhUb0FwcGx5IiwiYXJnc1dpdGhJZGVudGl0eSIsImNvbmNhdCIsImFwcGx5IiwiZmxvYXRWYWx1ZSIsInBhcnNlRmxvYXQiLCJpbmRleE9mIiwiTWF0aCIsIlBJIiwibGVuZ3RoIiwiX3ZhbGlkYXRlVHJhbnNmb3JtIiwiZ2V0VmFsdWUiLCJtdWx0aXZhbHVlVHJhbnNmb3JtcyIsIkFycmF5IiwiaXNBcnJheSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJwcm9jZXNzVHJhbnNmb3JtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgTWF0cml4TWF0aCA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9NYXRyaXhNYXRoJyk7XG5jb25zdCBQbGF0Zm9ybSA9IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9QbGF0Zm9ybScpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbmNvbnN0IHN0cmluZ2lmeVNhZmUgPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvc3RyaW5naWZ5U2FmZScpLmRlZmF1bHQ7XG5cbi8qKlxuICogR2VuZXJhdGUgYSB0cmFuc2Zvcm0gbWF0cml4IGJhc2VkIG9uIHRoZSBwcm92aWRlZCB0cmFuc2Zvcm1zLCBhbmQgdXNlIHRoYXRcbiAqIHdpdGhpbiB0aGUgc3R5bGUgb2JqZWN0IGluc3RlYWQuXG4gKlxuICogVGhpcyBhbGxvd3MgdXMgdG8gcHJvdmlkZSBhbiBBUEkgdGhhdCBpcyBzaW1pbGFyIHRvIENTUywgd2hlcmUgdHJhbnNmb3JtcyBtYXlcbiAqIGJlIGFwcGxpZWQgaW4gYW4gYXJiaXRyYXJ5IG9yZGVyLCBhbmQgeWV0IGhhdmUgYSB1bml2ZXJzYWwsIHNpbmd1bGFyXG4gKiBpbnRlcmZhY2UgdG8gbmF0aXZlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NUcmFuc2Zvcm0oXG4gIHRyYW5zZm9ybTogQXJyYXk8T2JqZWN0Pixcbik6IEFycmF5PE9iamVjdD4gfCBBcnJheTxudW1iZXI+IHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBfdmFsaWRhdGVUcmFuc2Zvcm1zKHRyYW5zZm9ybSk7XG4gIH1cblxuICAvLyBBbmRyb2lkICYgaU9TIGltcGxlbWVudGF0aW9ucyBvZiB0cmFuc2Zvcm0gcHJvcGVydHkgYWNjZXB0IHRoZSBsaXN0IG9mXG4gIC8vIHRyYW5zZm9ybSBwcm9wZXJ0aWVzIGFzIG9wcG9zZWQgdG8gYSB0cmFuc2Zvcm0gTWF0cml4LiBUaGlzIGlzIG5lY2Vzc2FyeVxuICAvLyB0byBjb250cm9sIHRyYW5zZm9ybSBwcm9wZXJ0eSB1cGRhdGVzIGNvbXBsZXRlbHkgb24gdGhlIG5hdGl2ZSB0aHJlYWQuXG4gIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnIHx8IFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgIHJldHVybiB0cmFuc2Zvcm07XG4gIH1cblxuICBjb25zdCByZXN1bHQgPSBNYXRyaXhNYXRoLmNyZWF0ZUlkZW50aXR5TWF0cml4KCk7XG5cbiAgdHJhbnNmb3JtLmZvckVhY2godHJhbnNmb3JtYXRpb24gPT4ge1xuICAgIGNvbnN0IGtleSA9IE9iamVjdC5rZXlzKHRyYW5zZm9ybWF0aW9uKVswXTtcbiAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybWF0aW9uW2tleV07XG5cbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICAgICAgTWF0cml4TWF0aC5tdWx0aXBseUludG8ocmVzdWx0LCByZXN1bHQsIHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwZXJzcGVjdGl2ZSc6XG4gICAgICAgIF9tdWx0aXBseVRyYW5zZm9ybShyZXN1bHQsIE1hdHJpeE1hdGgucmV1c2VQZXJzcGVjdGl2ZUNvbW1hbmQsIFt2YWx1ZV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JvdGF0ZVgnOlxuICAgICAgICBfbXVsdGlwbHlUcmFuc2Zvcm0ocmVzdWx0LCBNYXRyaXhNYXRoLnJldXNlUm90YXRlWENvbW1hbmQsIFtcbiAgICAgICAgICBfY29udmVydFRvUmFkaWFucyh2YWx1ZSksXG4gICAgICAgIF0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JvdGF0ZVknOlxuICAgICAgICBfbXVsdGlwbHlUcmFuc2Zvcm0ocmVzdWx0LCBNYXRyaXhNYXRoLnJldXNlUm90YXRlWUNvbW1hbmQsIFtcbiAgICAgICAgICBfY29udmVydFRvUmFkaWFucyh2YWx1ZSksXG4gICAgICAgIF0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICBjYXNlICdyb3RhdGVaJzpcbiAgICAgICAgX211bHRpcGx5VHJhbnNmb3JtKHJlc3VsdCwgTWF0cml4TWF0aC5yZXVzZVJvdGF0ZVpDb21tYW5kLCBbXG4gICAgICAgICAgX2NvbnZlcnRUb1JhZGlhbnModmFsdWUpLFxuICAgICAgICBdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzY2FsZSc6XG4gICAgICAgIF9tdWx0aXBseVRyYW5zZm9ybShyZXN1bHQsIE1hdHJpeE1hdGgucmV1c2VTY2FsZUNvbW1hbmQsIFt2YWx1ZV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NjYWxlWCc6XG4gICAgICAgIF9tdWx0aXBseVRyYW5zZm9ybShyZXN1bHQsIE1hdHJpeE1hdGgucmV1c2VTY2FsZVhDb21tYW5kLCBbdmFsdWVdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdzY2FsZVknOlxuICAgICAgICBfbXVsdGlwbHlUcmFuc2Zvcm0ocmVzdWx0LCBNYXRyaXhNYXRoLnJldXNlU2NhbGVZQ29tbWFuZCwgW3ZhbHVlXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndHJhbnNsYXRlJzpcbiAgICAgICAgX211bHRpcGx5VHJhbnNmb3JtKHJlc3VsdCwgTWF0cml4TWF0aC5yZXVzZVRyYW5zbGF0ZTNkQ29tbWFuZCwgW1xuICAgICAgICAgIHZhbHVlWzBdLFxuICAgICAgICAgIHZhbHVlWzFdLFxuICAgICAgICAgIHZhbHVlWzJdIHx8IDAsXG4gICAgICAgIF0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RyYW5zbGF0ZVgnOlxuICAgICAgICBfbXVsdGlwbHlUcmFuc2Zvcm0ocmVzdWx0LCBNYXRyaXhNYXRoLnJldXNlVHJhbnNsYXRlMmRDb21tYW5kLCBbXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgMCxcbiAgICAgICAgXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndHJhbnNsYXRlWSc6XG4gICAgICAgIF9tdWx0aXBseVRyYW5zZm9ybShyZXN1bHQsIE1hdHJpeE1hdGgucmV1c2VUcmFuc2xhdGUyZENvbW1hbmQsIFtcbiAgICAgICAgICAwLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICBdKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdza2V3WCc6XG4gICAgICAgIF9tdWx0aXBseVRyYW5zZm9ybShyZXN1bHQsIE1hdHJpeE1hdGgucmV1c2VTa2V3WENvbW1hbmQsIFtcbiAgICAgICAgICBfY29udmVydFRvUmFkaWFucyh2YWx1ZSksXG4gICAgICAgIF0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NrZXdZJzpcbiAgICAgICAgX211bHRpcGx5VHJhbnNmb3JtKHJlc3VsdCwgTWF0cml4TWF0aC5yZXVzZVNrZXdZQ29tbWFuZCwgW1xuICAgICAgICAgIF9jb252ZXJ0VG9SYWRpYW5zKHZhbHVlKSxcbiAgICAgICAgXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRyYW5zZm9ybSBuYW1lOiAnICsga2V5KTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZXN0cnVjdGl2ZSBvcGVyYXRpb24gb24gYSB0cmFuc2Zvcm0gbWF0cml4LlxuICovXG4vKiAkRmxvd0ZpeE1lW21pc3NpbmctdGhpcy1hbm5vdF0gVGhlICd0aGlzJyB0eXBlIGFubm90YXRpb24ocykgcmVxdWlyZWQgYnlcbiAqIEZsb3cncyBMVEkgdXBkYXRlIGNvdWxkIG5vdCBiZSBhZGRlZCB2aWEgY29kZW1vZCAqL1xuZnVuY3Rpb24gX211bHRpcGx5VHJhbnNmb3JtKFxuICByZXN1bHQ6IEFycmF5PG51bWJlcj4sXG4gIG1hdHJpeE1hdGhGdW5jdGlvbjogRnVuY3Rpb24sXG4gIGFyZ3M6IEFycmF5PG51bWJlcj4sXG4pOiB2b2lkIHtcbiAgY29uc3QgbWF0cml4VG9BcHBseSA9IE1hdHJpeE1hdGguY3JlYXRlSWRlbnRpdHlNYXRyaXgoKTtcbiAgY29uc3QgYXJnc1dpdGhJZGVudGl0eSA9IFttYXRyaXhUb0FwcGx5XS5jb25jYXQoYXJncyk7XG4gIG1hdHJpeE1hdGhGdW5jdGlvbi5hcHBseSh0aGlzLCBhcmdzV2l0aElkZW50aXR5KTtcbiAgTWF0cml4TWF0aC5tdWx0aXBseUludG8ocmVzdWx0LCByZXN1bHQsIG1hdHJpeFRvQXBwbHkpO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBsaWtlICcwLjVyYWQnIG9yICc2MGRlZycgaW50byByYWRpYW5zIGV4cHJlc3NlZCBpbiBhIGZsb2F0LlxuICogTm90ZSB0aGF0IHZhbGlkYXRpb24gb24gdGhlIHN0cmluZyBpcyBkb25lIGluIGBfdmFsaWRhdGVUcmFuc2Zvcm0oKWAuXG4gKi9cbmZ1bmN0aW9uIF9jb252ZXJ0VG9SYWRpYW5zKHZhbHVlOiBzdHJpbmcpOiBudW1iZXIge1xuICBjb25zdCBmbG9hdFZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZS5pbmRleE9mKCdyYWQnKSA+IC0xID8gZmxvYXRWYWx1ZSA6IChmbG9hdFZhbHVlICogTWF0aC5QSSkgLyAxODA7XG59XG5cbmZ1bmN0aW9uIF92YWxpZGF0ZVRyYW5zZm9ybXModHJhbnNmb3JtOiBBcnJheTxPYmplY3Q+KTogdm9pZCB7XG4gIHRyYW5zZm9ybS5mb3JFYWNoKHRyYW5zZm9ybWF0aW9uID0+IHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModHJhbnNmb3JtYXRpb24pO1xuICAgIGludmFyaWFudChcbiAgICAgIGtleXMubGVuZ3RoID09PSAxLFxuICAgICAgJ1lvdSBtdXN0IHNwZWNpZnkgZXhhY3RseSBvbmUgcHJvcGVydHkgcGVyIHRyYW5zZm9ybSBvYmplY3QuIFBhc3NlZCBwcm9wZXJ0aWVzOiAlcycsXG4gICAgICBzdHJpbmdpZnlTYWZlKHRyYW5zZm9ybWF0aW9uKSxcbiAgICApO1xuICAgIGNvbnN0IGtleSA9IGtleXNbMF07XG4gICAgY29uc3QgdmFsdWUgPSB0cmFuc2Zvcm1hdGlvbltrZXldO1xuICAgIF92YWxpZGF0ZVRyYW5zZm9ybShrZXksIHZhbHVlLCB0cmFuc2Zvcm1hdGlvbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBfdmFsaWRhdGVUcmFuc2Zvcm0oXG4gIGtleTpcbiAgICB8IHN0cmluZ1xuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J21hdHJpeCc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwncGVyc3BlY3RpdmUnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3JvdGF0ZSc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwncm90YXRlWCc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwncm90YXRlWSc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwncm90YXRlWic+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwnc2NhbGUnPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3NjYWxlWCc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwnc2NhbGVZJz5cbiAgICB8ICRURU1QT1JBUlkkc3RyaW5nPCdza2V3WCc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwnc2tld1knPlxuICAgIHwgJFRFTVBPUkFSWSRzdHJpbmc8J3RyYW5zbGF0ZSc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwndHJhbnNsYXRlWCc+XG4gICAgfCAkVEVNUE9SQVJZJHN0cmluZzwndHJhbnNsYXRlWSc+LFxuICB2YWx1ZTogYW55IHwgbnVtYmVyIHwgc3RyaW5nLFxuICB0cmFuc2Zvcm1hdGlvbjogYW55LFxuKSB7XG4gIGludmFyaWFudChcbiAgICAhdmFsdWUuZ2V0VmFsdWUsXG4gICAgJ1lvdSBwYXNzZWQgYW4gQW5pbWF0ZWQuVmFsdWUgdG8gYSBub3JtYWwgY29tcG9uZW50LiAnICtcbiAgICAgICdZb3UgbmVlZCB0byB3cmFwIHRoYXQgY29tcG9uZW50IGluIGFuIEFuaW1hdGVkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAncmVwbGFjZSA8VmlldyAvPiBieSA8QW5pbWF0ZWQuVmlldyAvPi4nLFxuICApO1xuXG4gIGNvbnN0IG11bHRpdmFsdWVUcmFuc2Zvcm1zID0gWydtYXRyaXgnLCAndHJhbnNsYXRlJ107XG4gIGlmIChtdWx0aXZhbHVlVHJhbnNmb3Jtcy5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgQXJyYXkuaXNBcnJheSh2YWx1ZSksXG4gICAgICAnVHJhbnNmb3JtIHdpdGgga2V5IG9mICVzIG11c3QgaGF2ZSBhbiBhcnJheSBhcyB0aGUgdmFsdWU6ICVzJyxcbiAgICAgIGtleSxcbiAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICk7XG4gIH1cbiAgc3dpdGNoIChrZXkpIHtcbiAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgaW52YXJpYW50KFxuICAgICAgICB2YWx1ZS5sZW5ndGggPT09IDkgfHwgdmFsdWUubGVuZ3RoID09PSAxNixcbiAgICAgICAgJ01hdHJpeCB0cmFuc2Zvcm0gbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDkgKDJkKSBvciAxNiAoM2QpLiAnICtcbiAgICAgICAgICAnUHJvdmlkZWQgbWF0cml4IGhhcyBhIGxlbmd0aCBvZiAlczogJXMnLFxuICAgICAgICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gKD49MC44NC4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzXG4gICAgICAgICAqIGNvbW1lbnQgc3VwcHJlc3NlcyBhbiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODQgd2FzIGRlcGxveWVkLiBUb1xuICAgICAgICAgKiBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICAgICAgdmFsdWUubGVuZ3RoLFxuICAgICAgICBzdHJpbmdpZnlTYWZlKHRyYW5zZm9ybWF0aW9uKSxcbiAgICAgICk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICd0cmFuc2xhdGUnOlxuICAgICAgaW52YXJpYW50KFxuICAgICAgICB2YWx1ZS5sZW5ndGggPT09IDIgfHwgdmFsdWUubGVuZ3RoID09PSAzLFxuICAgICAgICAnVHJhbnNmb3JtIHdpdGgga2V5IHRyYW5zbGF0ZSBtdXN0IGJlIGFuIGFycmF5IG9mIGxlbmd0aCAyIG9yIDMsIGZvdW5kICVzOiAlcycsXG4gICAgICAgIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSAoPj0wLjg0LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXNcbiAgICAgICAgICogY29tbWVudCBzdXBwcmVzc2VzIGFuIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44NCB3YXMgZGVwbG95ZWQuIFRvXG4gICAgICAgICAqIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgICAgICB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3JvdGF0ZVgnOlxuICAgIGNhc2UgJ3JvdGF0ZVknOlxuICAgIGNhc2UgJ3JvdGF0ZVonOlxuICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgY2FzZSAnc2tld1gnOlxuICAgIGNhc2UgJ3NrZXdZJzpcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgJ1RyYW5zZm9ybSB3aXRoIGtleSBvZiBcIiVzXCIgbXVzdCBiZSBhIHN0cmluZzogJXMnLFxuICAgICAgICBrZXksXG4gICAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICAgKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdmFsdWUuaW5kZXhPZignZGVnJykgPiAtMSB8fCB2YWx1ZS5pbmRleE9mKCdyYWQnKSA+IC0xLFxuICAgICAgICAnUm90YXRlIHRyYW5zZm9ybSBtdXN0IGJlIGV4cHJlc3NlZCBpbiBkZWdyZWVzIChkZWcpIG9yIHJhZGlhbnMgJyArXG4gICAgICAgICAgJyhyYWQpOiAlcycsXG4gICAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3BlcnNwZWN0aXZlJzpcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICAgJ1RyYW5zZm9ybSB3aXRoIGtleSBvZiBcIiVzXCIgbXVzdCBiZSBhIG51bWJlcjogJXMnLFxuICAgICAgICBrZXksXG4gICAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICAgKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdmFsdWUgIT09IDAsXG4gICAgICAgICdUcmFuc2Zvcm0gd2l0aCBrZXkgb2YgXCIlc1wiIGNhbm5vdCBiZSB6ZXJvOiAlcycsXG4gICAgICAgIGtleSxcbiAgICAgICAgc3RyaW5naWZ5U2FmZSh0cmFuc2Zvcm1hdGlvbiksXG4gICAgICApO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndHJhbnNsYXRlWCc6XG4gICAgY2FzZSAndHJhbnNsYXRlWSc6XG4gICAgY2FzZSAnc2NhbGUnOlxuICAgIGNhc2UgJ3NjYWxlWCc6XG4gICAgY2FzZSAnc2NhbGVZJzpcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICAgJ1RyYW5zZm9ybSB3aXRoIGtleSBvZiBcIiVzXCIgbXVzdCBiZSBhIG51bWJlcjogJXMnLFxuICAgICAgICBrZXksXG4gICAgICAgIHN0cmluZ2lmeVNhZmUodHJhbnNmb3JtYXRpb24pLFxuICAgICAgKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnSW52YWxpZCB0cmFuc2Zvcm0gJXM6ICVzJyxcbiAgICAgICAga2V5LFxuICAgICAgICBzdHJpbmdpZnlTYWZlKHRyYW5zZm9ybWF0aW9uKSxcbiAgICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzVHJhbnNmb3JtO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUVaLElBQU1BLFVBQVUsR0FBR0MsT0FBTywyQkFBMkI7QUFDckQsSUFBTUMsUUFBUSxHQUFHRCxPQUFPLHlCQUF5QjtBQUVqRCxJQUFNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDdEMsSUFBTUcsYUFBYSxHQUFHSCxPQUFPLDhCQUE4QixDQUFDSSxPQUFPO0FBVW5FLFNBQVNDLGdCQUFnQkEsQ0FDdkJDLFNBQXdCLEVBQ087RUFDL0IsSUFBSUMsT0FBTyxFQUFFO0lBQ1hDLG1CQUFtQixDQUFDRixTQUFTLENBQUM7RUFDaEM7RUFLQSxJQUFJTCxRQUFRLENBQUNRLEVBQUUsS0FBSyxTQUFTLElBQUlSLFFBQVEsQ0FBQ1EsRUFBRSxLQUFLLEtBQUssRUFBRTtJQUN0RCxPQUFPSCxTQUFTO0VBQ2xCO0VBRUEsSUFBTUksTUFBTSxHQUFHWCxVQUFVLENBQUNZLG9CQUFvQixFQUFFO0VBRWhETCxTQUFTLENBQUNNLE9BQU8sQ0FBQyxVQUFBQyxjQUFjLEVBQUk7SUFDbEMsSUFBTUMsR0FBRyxHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ0gsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLElBQU1JLEtBQUssR0FBR0osY0FBYyxDQUFDQyxHQUFHLENBQUM7SUFFakMsUUFBUUEsR0FBRztNQUNULEtBQUssUUFBUTtRQUNYZixVQUFVLENBQUNtQixZ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