70357efc4760859db9739621090e6c7e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _Platform = _interopRequireDefault(require("../Utilities/Platform"));
var PressabilityDebug = _interopRequireWildcard(require("../Pressability/PressabilityDebug"));
var _usePressability = _interopRequireDefault(require("../Pressability/usePressability"));
var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));
var _processColor = _interopRequireDefault(require("../StyleSheet/processColor"));
var _TextAncestor = _interopRequireDefault(require("./TextAncestor"));
var _TextNativeComponent = require("./TextNativeComponent");
var React = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["accessible", "allowFontScaling", "ellipsizeMode", "onLongPress", "onPress", "onPressIn", "onPressOut", "onResponderGrant", "onResponderMove", "onResponderRelease", "onResponderTerminate", "onResponderTerminationRequest", "onStartShouldSetResponder", "pressRetentionOffset", "suppressHighlighting"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var Text = React.forwardRef(function (props, forwardedRef) {
  var _props$accessibilityS, _props$accessibilityS2;
  var accessible = props.accessible,
    allowFontScaling = props.allowFontScaling,
    ellipsizeMode = props.ellipsizeMode,
    onLongPress = props.onLongPress,
    onPress = props.onPress,
    _onPressIn = props.onPressIn,
    _onPressOut = props.onPressOut,
    _onResponderGrant = props.onResponderGrant,
    _onResponderMove = props.onResponderMove,
    _onResponderRelease = props.onResponderRelease,
    _onResponderTerminate = props.onResponderTerminate,
    onResponderTerminationRequest = props.onResponderTerminationRequest,
    onStartShouldSetResponder = props.onStartShouldSetResponder,
    pressRetentionOffset = props.pressRetentionOffset,
    suppressHighlighting = props.suppressHighlighting,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _useState = (0, React.useState)(false),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    isHighlighted = _useState2[0],
    setHighlighted = _useState2[1];
  var _disabled = restProps.disabled != null ? restProps.disabled : (_props$accessibilityS = props.accessibilityState) == null ? void 0 : _props$accessibilityS.disabled;
  var _accessibilityState = _disabled !== ((_props$accessibilityS2 = props.accessibilityState) == null ? void 0 : _props$accessibilityS2.disabled) ? _objectSpread(_objectSpread({}, props.accessibilityState), {}, {
    disabled: _disabled
  }) : props.accessibilityState;
  var isPressable = (onPress != null || onLongPress != null || onStartShouldSetResponder != null) && _disabled !== true;
  var initialized = useLazyInitialization(isPressable);
  var config = (0, React.useMemo)(function () {
    return initialized ? {
      disabled: !isPressable,
      pressRectOffset: pressRetentionOffset,
      onLongPress: onLongPress,
      onPress: onPress,
      onPressIn: function onPressIn(event) {
        setHighlighted(!suppressHighlighting);
        _onPressIn == null ? void 0 : _onPressIn(event);
      },
      onPressOut: function onPressOut(event) {
        setHighlighted(false);
        _onPressOut == null ? void 0 : _onPressOut(event);
      },
      onResponderTerminationRequest_DEPRECATED: onResponderTerminationRequest,
      onStartShouldSetResponder_DEPRECATED: onStartShouldSetResponder
    } : null;
  }, [initialized, isPressable, pressRetentionOffset, onLongPress, onPress, _onPressIn, _onPressOut, onResponderTerminationRequest, onStartShouldSetResponder, suppressHighlighting]);
  var eventHandlers = (0, _usePressability.default)(config);
  var eventHandlersForText = (0, React.useMemo)(function () {
    return eventHandlers == null ? null : {
      onResponderGrant: function onResponderGrant(event) {
        eventHandlers.onResponderGrant(event);
        if (_onResponderGrant != null) {
          _onResponderGrant(event);
        }
      },
      onResponderMove: function onResponderMove(event) {
        eventHandlers.onResponderMove(event);
        if (_onResponderMove != null) {
          _onResponderMove(event);
        }
      },
      onResponderRelease: function onResponderRelease(event) {
        eventHandlers.onResponderRelease(event);
        if (_onResponderRelease != null) {
          _onResponderRelease(event);
        }
      },
      onResponderTerminate: function onResponderTerminate(event) {
        eventHandlers.onResponderTerminate(event);
        if (_onResponderTerminate != null) {
          _onResponderTerminate(event);
        }
      },
      onClick: eventHandlers.onClick,
      onResponderTerminationRequest: eventHandlers.onResponderTerminationRequest,
      onStartShouldSetResponder: eventHandlers.onStartShouldSetResponder
    };
  }, [eventHandlers, _onResponderGrant, _onResponderMove, _onResponderRelease, _onResponderTerminate]);
  var selectionColor = restProps.selectionColor == null ? null : (0, _processColor.default)(restProps.selectionColor);
  var style = restProps.style;
  if (__DEV__) {
    if (PressabilityDebug.isEnabled() && onPress != null) {
      style = _StyleSheet.default.compose(restProps.style, {
        color: 'magenta'
      });
    }
  }
  var numberOfLines = restProps.numberOfLines;
  if (numberOfLines != null && !(numberOfLines >= 0)) {
    console.error("'numberOfLines' in <Text> must be a non-negative number, received: " + numberOfLines + ". The value will be set to 0.");
    numberOfLines = 0;
  }
  var hasTextAncestor = (0, React.useContext)(_TextAncestor.default);
  var _accessible = _Platform.default.select({
    ios: accessible !== false,
    default: accessible
  });
  return hasTextAncestor ? (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeVirtualText, _objectSpread(_objectSpread(_objectSpread({}, restProps), eventHandlersForText), {}, {
    isHighlighted: isHighlighted,
    isPressable: isPressable,
    numberOfLines: numberOfLines,
    selectionColor: selectionColor,
    style: style,
    ref: forwardedRef
  })) : (0, _jsxRuntime.jsx)(_TextAncestor.default.Provider, {
    value: true,
    children: (0, _jsxRuntime.jsx)(_TextNativeComponent.NativeText, _objectSpread(_objectSpread(_objectSpread({}, restProps), eventHandlersForText), {}, {
      disabled: _disabled,
      accessible: _accessible,
      accessibilityState: _accessibilityState,
      allowFontScaling: allowFontScaling !== false,
      ellipsizeMode: ellipsizeMode != null ? ellipsizeMode : 'tail',
      isHighlighted: isHighlighted,
      numberOfLines: numberOfLines,
      selectionColor: selectionColor,
      style: style,
      ref: forwardedRef
    }))
  });
});
Text.displayName = 'Text';
function useLazyInitialization(newValue) {
  var _useState3 = (0, React.useState)(newValue),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    oldValue = _useState4[0],
    setValue = _useState4[1];
  if (!oldValue && newValue) {
    setValue(newValue);
  }
  return oldValue;
}
module.exports = Text;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,