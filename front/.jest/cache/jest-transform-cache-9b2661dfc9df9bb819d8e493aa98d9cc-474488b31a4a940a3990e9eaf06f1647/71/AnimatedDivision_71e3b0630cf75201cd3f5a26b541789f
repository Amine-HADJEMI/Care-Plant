6125a34dcfe2469719d9b21792191909
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var AnimatedInterpolation = require("./AnimatedInterpolation");
var AnimatedNode = require("./AnimatedNode");
var AnimatedValue = require("./AnimatedValue");
var AnimatedWithChildren = require("./AnimatedWithChildren");
var AnimatedDivision = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedDivision, _AnimatedWithChildren);
  var _super = _createSuper(AnimatedDivision);
  function AnimatedDivision(a, b) {
    var _this;
    (0, _classCallCheck2.default)(this, AnimatedDivision);
    _this = _super.call(this);
    _this._warnedAboutDivideByZero = false;
    if (b === 0 || b instanceof AnimatedNode && b.__getValue() === 0) {
      console.error('Detected potential division by zero in AnimatedDivision');
    }
    _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this;
  }
  (0, _createClass2.default)(AnimatedDivision, [{
    key: "__makeNative",
    value: function __makeNative(platformConfig) {
      this._a.__makeNative(platformConfig);
      this._b.__makeNative(platformConfig);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__makeNative", this).call(this, platformConfig);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var a = this._a.__getValue();
      var b = this._b.__getValue();
      if (b === 0) {
        if (!this._warnedAboutDivideByZero) {
          console.error('Detected division by zero in AnimatedDivision');
          this._warnedAboutDivideByZero = true;
        }
        return 0;
      }
      this._warnedAboutDivideByZero = false;
      return a / b;
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedDivision;
}(AnimatedWithChildren);
module.exports = AnimatedDivision;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY3JlYXRlQ2xhc3MyIiwiX2dldDIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsIl9jcmVhdGVTdXBlciIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9jcmVhdGVTdXBlckludGVybmFsIiwiU3VwZXIiLCJkZWZhdWx0IiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiYXJndW1lbnRzIiwiYXBwbHkiLCJzaGFtIiwiUHJveHkiLCJCb29sZWFuIiwicHJvdG90eXBlIiwidmFsdWVPZiIsImNhbGwiLCJlIiwiQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIiwiQW5pbWF0ZWROb2RlIiwiQW5pbWF0ZWRWYWx1ZSIsIkFuaW1hdGVkV2l0aENoaWxkcmVuIiwiQW5pbWF0ZWREaXZpc2lvbiIsIl9BbmltYXRlZFdpdGhDaGlsZHJlbiIsIl9zdXBlciIsImEiLCJiIiwiX3RoaXMiLCJfd2FybmVkQWJvdXREaXZpZGVCeVplcm8iLCJfX2dldFZhbHVlIiwiY29uc29sZSIsImVycm9yIiwiX2EiLCJfYiIsImtleSIsInZhbHVlIiwiX19tYWtlTmF0aXZlIiwicGxhdGZvcm1Db25maWciLCJpbnRlcnBvbGF0ZSIsImNvbmZpZyIsIl9fYXR0YWNoIiwiX19hZGRDaGlsZCIsIl9fZGV0YWNoIiwiX19yZW1vdmVDaGlsZCIsIl9fZ2V0TmF0aXZlQ29uZmlnIiwidHlwZSIsImlucHV0IiwiX19nZXROYXRpdmVUYWciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiQW5pbWF0ZWREaXZpc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgTWV0YSBQbGF0Zm9ybXMsIEluYy4gYW5kIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkSW50ZXJwb2xhdGlvbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRJbnRlcnBvbGF0aW9uJyk7XG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkTm9kZScpO1xuY29uc3QgQW5pbWF0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRWYWx1ZScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5cbmltcG9ydCB0eXBlIHtJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZX0gZnJvbSAnLi9BbmltYXRlZEludGVycG9sYXRpb24nO1xuaW1wb3J0IHR5cGUge1BsYXRmb3JtQ29uZmlnfSBmcm9tICcuLi9BbmltYXRlZFBsYXRmb3JtQ29uZmlnJztcblxuY2xhc3MgQW5pbWF0ZWREaXZpc2lvbiBleHRlbmRzIEFuaW1hdGVkV2l0aENoaWxkcmVuIHtcbiAgX2E6IEFuaW1hdGVkTm9kZTtcbiAgX2I6IEFuaW1hdGVkTm9kZTtcbiAgX3dhcm5lZEFib3V0RGl2aWRlQnlaZXJvOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoYTogQW5pbWF0ZWROb2RlIHwgbnVtYmVyLCBiOiBBbmltYXRlZE5vZGUgfCBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChiID09PSAwIHx8IChiIGluc3RhbmNlb2YgQW5pbWF0ZWROb2RlICYmIGIuX19nZXRWYWx1ZSgpID09PSAwKSkge1xuICAgICAgY29uc29sZS5lcnJvcignRGV0ZWN0ZWQgcG90ZW50aWFsIGRpdmlzaW9uIGJ5IHplcm8gaW4gQW5pbWF0ZWREaXZpc2lvbicpO1xuICAgIH1cbiAgICB0aGlzLl9hID0gdHlwZW9mIGEgPT09ICdudW1iZXInID8gbmV3IEFuaW1hdGVkVmFsdWUoYSkgOiBhO1xuICAgIHRoaXMuX2IgPSB0eXBlb2YgYiA9PT0gJ251bWJlcicgPyBuZXcgQW5pbWF0ZWRWYWx1ZShiKSA6IGI7XG4gIH1cblxuICBfX21ha2VOYXRpdmUocGxhdGZvcm1Db25maWc6ID9QbGF0Zm9ybUNvbmZpZykge1xuICAgIHRoaXMuX2EuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgICB0aGlzLl9iLl9fbWFrZU5hdGl2ZShwbGF0Zm9ybUNvbmZpZyk7XG4gICAgc3VwZXIuX19tYWtlTmF0aXZlKHBsYXRmb3JtQ29uZmlnKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBhID0gdGhpcy5fYS5fX2dldFZhbHVlKCk7XG4gICAgY29uc3QgYiA9IHRoaXMuX2IuX19nZXRWYWx1ZSgpO1xuICAgIGlmIChiID09PSAwKSB7XG4gICAgICAvLyBQcmV2ZW50IHNwYW1taW5nIHRoZSBjb25zb2xlL0xvZ0JveFxuICAgICAgaWYgKCF0aGlzLl93YXJuZWRBYm91dERpdmlkZUJ5WmVybykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdEZXRlY3RlZCBkaXZpc2lvbiBieSB6ZXJvIGluIEFuaW1hdGVkRGl2aXNpb24nKTtcbiAgICAgICAgdGhpcy5fd2FybmVkQWJvdXREaXZpZGVCeVplcm8gPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gUGFzc2luZyBpbmZpbml0eS9OYU4gdG8gRmFicmljIHdpbGwgY2F1c2UgYSBuYXRpdmUgY3Jhc2hcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICB0aGlzLl93YXJuZWRBYm91dERpdmlkZUJ5WmVybyA9IGZhbHNlO1xuICAgIHJldHVybiBhIC8gYjtcbiAgfVxuXG4gIGludGVycG9sYXRlPE91dHB1dFQ6IG51bWJlciB8IHN0cmluZz4oXG4gICAgY29uZmlnOiBJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZTxPdXRwdXRUPixcbiAgKTogQW5pbWF0ZWRJbnRlcnBvbGF0aW9uPE91dHB1dFQ+IHtcbiAgICByZXR1cm4gbmV3IEFuaW1hdGVkSW50ZXJwb2xhdGlvbih0aGlzLCBjb25maWcpO1xuICB9XG5cbiAgX19hdHRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fYS5fX2FkZENoaWxkKHRoaXMpO1xuICAgIHRoaXMuX2IuX19hZGRDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIF9fZGV0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX2EuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB0aGlzLl9iLl9fcmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQ29uZmlnKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkaXZpc2lvbicsXG4gICAgICBpbnB1dDogW3RoaXMuX2EuX19nZXROYXRpdmVUYWcoKSwgdGhpcy5fYi5fX2dldE5hdGl2ZVRhZygpXSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0ZWREaXZpc2lvbjtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFBQyxJQUFBQSxzQkFBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsZ0JBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFFLGFBQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFHLEtBQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFJLFVBQUEsR0FBQUwsc0JBQUEsQ0FBQUMsT0FBQTtBQUFBLElBQUFLLDJCQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBQSxJQUFBTSxnQkFBQSxHQUFBUCxzQkFBQSxDQUFBQyxPQUFBO0FBQUEsU0FBQU8sYUFB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