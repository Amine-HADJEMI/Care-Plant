2d5b189d192d24d0615a7a384960bfe0
'use strict';

function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}
function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}
function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }
  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }
  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }
  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }
  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }
  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }
  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }
  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}
module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiU3ByaW5nQ29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnR5cGUgU3ByaW5nQ29uZmlnVHlwZSA9IHtcbiAgc3RpZmZuZXNzOiBudW1iZXIsXG4gIGRhbXBpbmc6IG51bWJlcixcbiAgLi4uXG59O1xuXG5mdW5jdGlvbiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZTogbnVtYmVyKSB7XG4gIHJldHVybiAob1ZhbHVlIC0gMzApICogMy42MiArIDE5NDtcbn1cblxuZnVuY3Rpb24gZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUob1ZhbHVlOiBudW1iZXIpIHtcbiAgcmV0dXJuIChvVmFsdWUgLSA4KSAqIDMgKyAyNTtcbn1cblxuZnVuY3Rpb24gZnJvbU9yaWdhbWlUZW5zaW9uQW5kRnJpY3Rpb24oXG4gIHRlbnNpb246IG51bWJlcixcbiAgZnJpY3Rpb246IG51bWJlcixcbik6IFNwcmluZ0NvbmZpZ1R5cGUge1xuICByZXR1cm4ge1xuICAgIHN0aWZmbmVzczogc3RpZmZuZXNzRnJvbU9yaWdhbWlWYWx1ZSh0ZW5zaW9uKSxcbiAgICBkYW1waW5nOiBkYW1waW5nRnJvbU9yaWdhbWlWYWx1ZShmcmljdGlvbiksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGZyb21Cb3VuY2luZXNzQW5kU3BlZWQoXG4gIGJvdW5jaW5lc3M6IG51bWJlcixcbiAgc3BlZWQ6IG51bWJlcixcbik6IFNwcmluZ0NvbmZpZ1R5cGUge1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsdWU6IG51bWJlciwgc3RhcnRWYWx1ZTogbnVtYmVyLCBlbmRWYWx1ZTogbnVtYmVyKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAtIHN0YXJ0VmFsdWUpIC8gKGVuZFZhbHVlIC0gc3RhcnRWYWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9qZWN0Tm9ybWFsKG46IG51bWJlciwgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpIHtcbiAgICByZXR1cm4gc3RhcnQgKyBuICogKGVuZCAtIHN0YXJ0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVhckludGVycG9sYXRpb24odDogbnVtYmVyLCBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcikge1xuICAgIHJldHVybiB0ICogZW5kICsgKDEgLSB0KSAqIHN0YXJ0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZHJhdGljT3V0SW50ZXJwb2xhdGlvbih0OiBudW1iZXIsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIGxpbmVhckludGVycG9sYXRpb24oMiAqIHQgLSB0ICogdCwgc3RhcnQsIGVuZCk7XG4gIH1cblxuICBmdW5jdGlvbiBiM0ZyaWN0aW9uMSh4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gMC4wMDA3ICogTWF0aC5wb3coeCwgMykgLSAwLjAzMSAqIE1hdGgucG93KHgsIDIpICsgMC42NCAqIHggKyAxLjI4O1xuICB9XG5cbiAgZnVuY3Rpb24gYjNGcmljdGlvbjIoeDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIDAuMDAwMDQ0ICogTWF0aC5wb3coeCwgMykgLSAwLjAwNiAqIE1hdGgucG93KHgsIDIpICsgMC4zNiAqIHggKyAyO1xuICB9XG5cbiAgZnVuY3Rpb24gYjNGcmljdGlvbjMoeDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDAuMDAwMDAwNDUgKiBNYXRoLnBvdyh4LCAzKSAtXG4gICAgICAwLjAwMDMzMiAqIE1hdGgucG93KHgsIDIpICtcbiAgICAgIDAuMTA3OCAqIHggK1xuICAgICAgNS44NFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBiM05vYm91bmNlKHRlbnNpb246IG51bWJlcikge1xuICAgIGlmICh0ZW5zaW9uIDw9IDE4KSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjEodGVuc2lvbik7XG4gICAgfSBlbHNlIGlmICh0ZW5zaW9uID4gMTggJiYgdGVuc2lvbiA8PSA0NCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24yKHRlbnNpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjModGVuc2lvbik7XG4gICAgfVxuICB9XG5cbiAgbGV0IGIgPSBub3JtYWxpemUoYm91bmNpbmVzcyAvIDEuNywgMCwgMjApO1xuICBiID0gcHJvamVjdE5vcm1hbChiLCAwLCAwLjgpO1xuICBjb25zdCBzID0gbm9ybWFsaXplKHNwZWVkIC8gMS43LCAwLCAyMCk7XG4gIGNvbnN0IGJvdW5jeVRlbnNpb24gPSBwcm9qZWN0Tm9ybWFsKHMsIDAuNSwgMjAwKTtcbiAgY29uc3QgYm91bmN5RnJpY3Rpb24gPSBxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uKFxuICAgIGIsXG4gICAgYjNOb2JvdW5jZShib3VuY3lUZW5zaW9uKSxcbiAgICAwLjAxLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeVRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeUZyaWN0aW9uKSxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uLFxuICBmcm9tQm91bmNpbmVzc0FuZFNwZWVkLFxufTtcbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTs7QUFRWixTQUFTQSx5QkFBeUJBLENBQUNDLE1BQWMsRUFBRTtFQUNqRCxPQUFPLENBQUNBLE1BQU0sR0FBRyxFQUFFLElBQUksSUFBSSxHQUFHLEdBQUc7QUFDbkM7QUFFQSxTQUFTQyx1QkFBdUJBLENBQUNELE1BQWMsRUFBRTtFQUMvQyxPQUFPLENBQUNBLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7QUFDOUI7QUFFQSxTQUFTRSw2QkFBNkJBLENBQ3BDQyxPQUFlLEVBQ2ZDLFFBQWdCLEVBQ0U7RUFDbEIsT0FBTztJQUNMQyxTQUFTLEVBQUVOLHlCQUF5QixDQUFDSSxPQUFPLENBQUM7SUFDN0NHLE9BQU8sRUFBRUwsdUJBQXVCLENBQUNHLFFBQVE7RUFDM0MsQ0FBQztBQUNIO0FBRUEsU0FBU0csc0JBQXNCQSxDQUM3QkMsVUFBa0IsRUFDbEJDLEtBQWEsRUFDSztFQUNsQixTQUFTQyxTQUFTQSxDQUFDQyxLQUFhLEVBQUVDLFVBQWtCLEVBQUVDLFFBQWdCLEVBQUU7SUFDdEUsT0FBTyxDQUFDRixLQUFLLEdBQUdDLFVBQVUsS0FBS0MsUUFBUSxHQUFHRCxVQUFVLENBQUM7RUFD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