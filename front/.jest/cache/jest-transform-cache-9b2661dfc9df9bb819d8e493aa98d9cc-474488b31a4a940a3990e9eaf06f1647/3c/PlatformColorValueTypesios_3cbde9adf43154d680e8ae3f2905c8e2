d40844fb1a7684030c1b16ad5a0831ec
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processColorObject = exports.normalizeColorObject = exports.PlatformColor = exports.DynamicColorIOSPrivate = void 0;
var PlatformColor = function PlatformColor() {
  for (var _len = arguments.length, names = new Array(_len), _key = 0; _key < _len; _key++) {
    names[_key] = arguments[_key];
  }
  return {
    semantic: names
  };
};
exports.PlatformColor = PlatformColor;
var DynamicColorIOSPrivate = function DynamicColorIOSPrivate(tuple) {
  return {
    dynamic: {
      light: tuple.light,
      dark: tuple.dark,
      highContrastLight: tuple.highContrastLight,
      highContrastDark: tuple.highContrastDark
    }
  };
};
exports.DynamicColorIOSPrivate = DynamicColorIOSPrivate;
var normalizeColorObject = function normalizeColorObject(color) {
  if ('semantic' in color) {
    return color;
  } else if ('dynamic' in color && color.dynamic !== undefined) {
    var normalizeColor = require("./normalizeColor");
    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: normalizeColor(dynamic.light),
        dark: normalizeColor(dynamic.dark),
        highContrastLight: normalizeColor(dynamic.highContrastLight),
        highContrastDark: normalizeColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }
  return null;
};
exports.normalizeColorObject = normalizeColorObject;
var processColorObject = function processColorObject(color) {
  if ('dynamic' in color && color.dynamic != null) {
    var processColor = require("./processColor");
    var dynamic = color.dynamic;
    var dynamicColor = {
      dynamic: {
        light: processColor(dynamic.light),
        dark: processColor(dynamic.dark),
        highContrastLight: processColor(dynamic.highContrastLight),
        highContrastDark: processColor(dynamic.highContrastDark)
      }
    };
    return dynamicColor;
  }
  return color;
};
exports.processColorObject = processColorObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQbGF0Zm9ybUNvbG9yIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm5hbWVzIiwiQXJyYXkiLCJfa2V5Iiwic2VtYW50aWMiLCJleHBvcnRzIiwiRHluYW1pY0NvbG9ySU9TUHJpdmF0ZSIsInR1cGxlIiwiZHluYW1pYyIsImxpZ2h0IiwiZGFyayIsImhpZ2hDb250cmFzdExpZ2h0IiwiaGlnaENvbnRyYXN0RGFyayIsIm5vcm1hbGl6ZUNvbG9yT2JqZWN0IiwiY29sb3IiLCJ1bmRlZmluZWQiLCJub3JtYWxpemVDb2xvciIsInJlcXVpcmUiLCJkeW5hbWljQ29sb3IiLCJwcm9jZXNzQ29sb3JPYmplY3QiLCJwcm9jZXNzQ29sb3IiXSwic291cmNlcyI6WyJQbGF0Zm9ybUNvbG9yVmFsdWVUeXBlcy5pb3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuL1N0eWxlU2hlZXQnO1xuaW1wb3J0IHR5cGUge1Byb2Nlc3NlZENvbG9yVmFsdWV9IGZyb20gJy4vcHJvY2Vzc0NvbG9yJztcblxuZXhwb3J0IG9wYXF1ZSB0eXBlIE5hdGl2ZUNvbG9yVmFsdWUgPSB7XG4gIHNlbWFudGljPzogQXJyYXk8c3RyaW5nPixcbiAgZHluYW1pYz86IHtcbiAgICBsaWdodDogPyhDb2xvclZhbHVlIHwgUHJvY2Vzc2VkQ29sb3JWYWx1ZSksXG4gICAgZGFyazogPyhDb2xvclZhbHVlIHwgUHJvY2Vzc2VkQ29sb3JWYWx1ZSksXG4gICAgaGlnaENvbnRyYXN0TGlnaHQ/OiA/KENvbG9yVmFsdWUgfCBQcm9jZXNzZWRDb2xvclZhbHVlKSxcbiAgICBoaWdoQ29udHJhc3REYXJrPzogPyhDb2xvclZhbHVlIHwgUHJvY2Vzc2VkQ29sb3JWYWx1ZSksXG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgUGxhdGZvcm1Db2xvciA9ICguLi5uYW1lczogQXJyYXk8c3RyaW5nPik6IENvbG9yVmFsdWUgPT4ge1xuICByZXR1cm4ge3NlbWFudGljOiBuYW1lc307XG59O1xuXG5leHBvcnQgdHlwZSBEeW5hbWljQ29sb3JJT1NUdXBsZVByaXZhdGUgPSB7XG4gIGxpZ2h0OiBDb2xvclZhbHVlLFxuICBkYXJrOiBDb2xvclZhbHVlLFxuICBoaWdoQ29udHJhc3RMaWdodD86IENvbG9yVmFsdWUsXG4gIGhpZ2hDb250cmFzdERhcms/OiBDb2xvclZhbHVlLFxufTtcblxuZXhwb3J0IGNvbnN0IER5bmFtaWNDb2xvcklPU1ByaXZhdGUgPSAoXG4gIHR1cGxlOiBEeW5hbWljQ29sb3JJT1NUdXBsZVByaXZhdGUsXG4pOiBDb2xvclZhbHVlID0+IHtcbiAgcmV0dXJuIHtcbiAgICBkeW5hbWljOiB7XG4gICAgICBsaWdodDogdHVwbGUubGlnaHQsXG4gICAgICBkYXJrOiB0dXBsZS5kYXJrLFxuICAgICAgaGlnaENvbnRyYXN0TGlnaHQ6IHR1cGxlLmhpZ2hDb250cmFzdExpZ2h0LFxuICAgICAgaGlnaENvbnRyYXN0RGFyazogdHVwbGUuaGlnaENvbnRyYXN0RGFyayxcbiAgICB9LFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZUNvbG9yT2JqZWN0ID0gKFxuICBjb2xvcjogTmF0aXZlQ29sb3JWYWx1ZSxcbik6ID9Qcm9jZXNzZWRDb2xvclZhbHVlID0+IHtcbiAgaWYgKCdzZW1hbnRpYycgaW4gY29sb3IpIHtcbiAgICAvLyBhbiBpb3Mgc2VtYW50aWMgY29sb3JcbiAgICByZXR1cm4gY29sb3I7XG4gIH0gZWxzZSBpZiAoJ2R5bmFtaWMnIGluIGNvbG9yICYmIGNvbG9yLmR5bmFtaWMgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZUNvbG9yID0gcmVxdWlyZSgnLi9ub3JtYWxpemVDb2xvcicpO1xuXG4gICAgLy8gYSBkeW5hbWljLCBhcHBlYXJhbmNlIGF3YXJlIGNvbG9yXG4gICAgY29uc3QgZHluYW1pYyA9IGNvbG9yLmR5bmFtaWM7XG4gICAgY29uc3QgZHluYW1pY0NvbG9yOiBOYXRpdmVDb2xvclZhbHVlID0ge1xuICAgICAgZHluYW1pYzoge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgIGxpZ2h0OiBub3JtYWxpemVDb2xvcihkeW5hbWljLmxpZ2h0KSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICBkYXJrOiBub3JtYWxpemVDb2xvcihkeW5hbWljLmRhcmspLFxuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgIGhpZ2hDb250cmFzdExpZ2h0OiBub3JtYWxpemVDb2xvcihkeW5hbWljLmhpZ2hDb250cmFzdExpZ2h0KSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICBoaWdoQ29udHJhc3REYXJrOiBub3JtYWxpemVDb2xvcihkeW5hbWljLmhpZ2hDb250cmFzdERhcmspLFxuICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBkeW5hbWljQ29sb3I7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9jZXNzQ29sb3JPYmplY3QgPSAoXG4gIGNvbG9yOiBOYXRpdmVDb2xvclZhbHVlLFxuKTogP05hdGl2ZUNvbG9yVmFsdWUgPT4ge1xuICBpZiAoJ2R5bmFtaWMnIGluIGNvbG9yICYmIGNvbG9yLmR5bmFtaWMgIT0gbnVsbCkge1xuICAgIGNvbnN0IHByb2Nlc3NDb2xvciA9IHJlcXVpcmUoJy4vcHJvY2Vzc0NvbG9yJyk7XG4gICAgY29uc3QgZHluYW1pYyA9IGNvbG9yLmR5bmFtaWM7XG4gICAgY29uc3QgZHluYW1pY0NvbG9yOiBOYXRpdmVDb2xvclZhbHVlID0ge1xuICAgICAgZHluYW1pYzoge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgICAgIGxpZ2h0OiBwcm9jZXNzQ29sb3IoZHluYW1pYy5saWdodCksXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgZGFyazogcHJvY2Vzc0NvbG9yKGR5bmFtaWMuZGFyayksXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgaGlnaENvbnRyYXN0TGlnaHQ6IHByb2Nlc3NDb2xvcihkeW5hbWljLmhpZ2hDb250cmFzdExpZ2h0KSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgICBoaWdoQ29udHJhc3REYXJrOiBwcm9jZXNzQ29sb3IoZHluYW1pYy5oaWdoQ29udHJhc3REYXJrKSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICByZXR1cm4gZHluYW1pY0NvbG9yO1xuICB9XG4gIHJldHVybiBjb2xvcjtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUF1Qk8sSUFBTUEsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFBLEVBQTRDO0VBQUEsU0FBQUMsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBckNDLEtBQUssT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFBLEVBQUFLLElBQUE7SUFBTEYsS0FBSyxDQUFBRSxJQUFBLElBQUFKLFNBQUEsQ0FBQUksSUFBQTtFQUFBO0VBQ3BDLE9BQU87SUFBQ0MsUUFBUSxFQUFFSDtFQUFLLENBQUM7QUFDMUIsQ0FBQztBQUFDSSxPQUFBLENBQUFSLGFBQUEsR0FBQUEsYUFBQTtBQVNLLElBQU1TLHNCQUFzQixHQUFHLFNBQXpCQSxzQkFBc0JBLENBQ2pDQyxLQUFrQyxFQUNuQjtFQUNmLE9BQU87SUFDTEMsT0FBTyxFQUFFO01BQ1BDLEtBQUssRUFBRUYsS0FBSyxDQUFDRSxLQUFLO01BQ2xCQyxJQUFJLEVBQUVILEtBQUssQ0FBQ0csSUFBSTtNQUNoQkMsaUJBQWlCLEVBQUVKLEtBQUssQ0FBQ0ksaUJBQWlCO01BQzFDQyxnQkFBZ0IsRUFBRUwsS0FBSyxDQUFDSztJQUMxQjtFQUNGLENBQUM7QUFDSCxDQUFDO0FBQUNQLE9BQUEsQ0FBQUMsc0JBQUEsR0FBQUEsc0JBQUE7QUFFSyxJQUFNTyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQW9CQSxDQUMvQkMsS0FBdUIsRUFDRTtFQUN6QixJQUFJLFVBQVUsSUFBSUEsS0FBSyxFQUFFO0lBRXZCLE9BQU9BLEtBQUs7RUFDZCxDQUFDLE1BQU0sSUFBSSxTQUFTLElBQUlBLEtBQUssSUFBSUEsS0FBSyxDQUFDTixPQUFPLEtBQUtPLFNBQVMsRUFBRTtJQUM1RCxJQUFNQyxjQUFjLEdBQUdDLE9BQU8sb0JBQW9CO0lBR2xELElBQU1ULE9BQU8sR0FBR00sS0FBSyxDQUFDTixPQUFPO0lBQzdCLElBQU1VLFlBQThCLEdBQUc7TUFDckNWLE9BQU8sRUFBRTtRQUVQQyxLQUFLLEVBQUVPLGNBQWMsQ0FBQ1IsT0FBTyxDQUFDQyxLQUFLLENBQUM7UUFFcENDLElBQUksRUFBRU0sY0FBYyxDQUFDUixPQUFPLENBQUNFLElBQUksQ0FBQztRQUVsQ0MsaUJBQWlCLEVBQUVLLGNBQWMsQ0FBQ1IsT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQztRQUU1REMsZ0JBQWdCLEVBQUVJLGNBQWMsQ0FBQ1IsT0FBTyxDQUFDSSxnQkFBZ0I7TUFDM0Q7SUFDRixDQUFDO0lBQ0QsT0FBT00sWUFBWTtFQUNyQjtFQUVBLE9BQU8sSUFBSTtBQUNiLENBQUM7QUFBQ2IsT0FBQSxDQUFBUSxvQkFBQSxHQUFBQSxvQkFBQTtBQUVLLElBQU1NLGtCQUFrQixHQUFHLFNBQXJCQSxrQkFBa0JBLENBQzdCTCxLQUF1QixFQUNEO0VBQ3RCLElBQUksU0FBUyxJQUFJQSxLQUFLLElBQUlBLEtBQUssQ0FBQ04sT0FBTyxJQUFJLElBQUksRUFBRTtJQUMvQyxJQUFNWSxZQUFZLEdBQUdILE9BQU8sa0JBQWtCO0lBQzlDLElBQU1ULE9BQU8sR0FBR00sS0FBSyxDQUFDTixPQUFPO0lBQzdCLElBQU1VLFlBQThCLEdBQUc7TUFDckNWLE9BQU8sRUFBRTtRQUVQQyxLQUFLLEVBQUVXLFlBQVksQ0FBQ1osT0FBTyxDQUFDQyxLQUFLLENBQUM7UUFFbENDLElBQUksRUFBRVUsWUFBWSxDQUFDWixPQUFPLENBQUNFLElBQUksQ0FBQztRQUVoQ0MsaUJBQWlCLEVBQUVTLFlBQVksQ0FBQ1osT0FBTyxDQUFDRyxpQkFBaUIsQ0FBQztRQUUxREMsZ0JBQWdCLEVBQUVRLFlBQVksQ0FBQ1osT0FBTyxDQUFDSSxnQkFBZ0I7TUFDekQ7SUFDRixDQUFDO0lBQ0QsT0FBT00sWUFBWTtFQUNyQjtFQUNBLE9BQU9KLEtBQUs7QUFDZCxDQUFDO0FBQUNULE9BQUEsQ0FBQWMsa0JBQUEsR0FBQUEsa0JBQUEifQ==