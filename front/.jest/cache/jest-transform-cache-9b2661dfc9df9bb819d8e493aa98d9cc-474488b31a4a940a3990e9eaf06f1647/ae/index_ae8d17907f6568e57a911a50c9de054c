82fef16cea87c7e844a9805a3bcf4361
'use strict';
var invariant = require('invariant');
var warnOnce = require("./Libraries/Utilities/warnOnce");
module.exports = {
  get AccessibilityInfo() {
    return require("./Libraries/Components/AccessibilityInfo/AccessibilityInfo").default;
  },
  get ActivityIndicator() {
    return require("./Libraries/Components/ActivityIndicator/ActivityIndicator");
  },
  get Button() {
    return require("./Libraries/Components/Button");
  },
  get DatePickerIOS() {
    warnOnce('DatePickerIOS-merged', 'DatePickerIOS has been merged with DatePickerAndroid and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
    return require("./Libraries/Components/DatePicker/DatePickerIOS");
  },
  get DrawerLayoutAndroid() {
    return require("./Libraries/Components/DrawerAndroid/DrawerLayoutAndroid");
  },
  get FlatList() {
    return require("./Libraries/Lists/FlatList");
  },
  get Image() {
    return require("./Libraries/Image/Image");
  },
  get ImageBackground() {
    return require("./Libraries/Image/ImageBackground");
  },
  get InputAccessoryView() {
    return require("./Libraries/Components/TextInput/InputAccessoryView");
  },
  get KeyboardAvoidingView() {
    return require("./Libraries/Components/Keyboard/KeyboardAvoidingView").default;
  },
  get MaskedViewIOS() {
    warnOnce('maskedviewios-moved', 'MaskedViewIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-masked-view/masked-view' instead of 'react-native'. " + 'See https://github.com/react-native-masked-view/masked-view');
    return require("./Libraries/Components/MaskedView/MaskedViewIOS");
  },
  get Modal() {
    return require("./Libraries/Modal/Modal");
  },
  get Pressable() {
    return require("./Libraries/Components/Pressable/Pressable").default;
  },
  get ProgressBarAndroid() {
    warnOnce('progress-bar-android-moved', 'ProgressBarAndroid has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-bar-android' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-bar-android');
    return require("./Libraries/Components/ProgressBarAndroid/ProgressBarAndroid");
  },
  get ProgressViewIOS() {
    warnOnce('progress-view-ios-moved', 'ProgressViewIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/progress-view' instead of 'react-native'. " + 'See https://github.com/react-native-progress-view/progress-view');
    return require("./Libraries/Components/ProgressViewIOS/ProgressViewIOS");
  },
  get RefreshControl() {
    return require("./Libraries/Components/RefreshControl/RefreshControl");
  },
  get SafeAreaView() {
    return require("./Libraries/Components/SafeAreaView/SafeAreaView").default;
  },
  get ScrollView() {
    return require("./Libraries/Components/ScrollView/ScrollView");
  },
  get SectionList() {
    return require("./Libraries/Lists/SectionList").default;
  },
  get Slider() {
    warnOnce('slider-moved', 'Slider has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-slider');
    return require("./Libraries/Components/Slider/Slider");
  },
  get StatusBar() {
    return require("./Libraries/Components/StatusBar/StatusBar");
  },
  get Switch() {
    return require("./Libraries/Components/Switch/Switch").default;
  },
  get Text() {
    return require("./Libraries/Text/Text");
  },
  get TextInput() {
    return require("./Libraries/Components/TextInput/TextInput");
  },
  get Touchable() {
    return require("./Libraries/Components/Touchable/Touchable");
  },
  get TouchableHighlight() {
    return require("./Libraries/Components/Touchable/TouchableHighlight");
  },
  get TouchableNativeFeedback() {
    return require("./Libraries/Components/Touchable/TouchableNativeFeedback");
  },
  get TouchableOpacity() {
    return require("./Libraries/Components/Touchable/TouchableOpacity");
  },
  get TouchableWithoutFeedback() {
    return require("./Libraries/Components/Touchable/TouchableWithoutFeedback");
  },
  get View() {
    return require("./Libraries/Components/View/View");
  },
  get VirtualizedList() {
    return require("./Libraries/Lists/VirtualizedList");
  },
  get VirtualizedSectionList() {
    return require("./Libraries/Lists/VirtualizedSectionList");
  },
  get ActionSheetIOS() {
    return require("./Libraries/ActionSheetIOS/ActionSheetIOS");
  },
  get Alert() {
    return require("./Libraries/Alert/Alert");
  },
  get Animated() {
    return require("./Libraries/Animated/Animated");
  },
  get Appearance() {
    return require("./Libraries/Utilities/Appearance");
  },
  get AppRegistry() {
    return require("./Libraries/ReactNative/AppRegistry");
  },
  get AppState() {
    return require("./Libraries/AppState/AppState");
  },
  get AsyncStorage() {
    warnOnce('async-storage-moved', 'AsyncStorage has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-async-storage/async-storage' instead of 'react-native'. " + 'See https://github.com/react-native-async-storage/async-storage');
    return require("./Libraries/Storage/AsyncStorage");
  },
  get BackHandler() {
    return require("./Libraries/Utilities/BackHandler");
  },
  get Clipboard() {
    warnOnce('clipboard-moved', 'Clipboard has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-clipboard/clipboard' instead of 'react-native'. " + 'See https://github.com/react-native-clipboard/clipboard');
    return require("./Libraries/Components/Clipboard/Clipboard");
  },
  get DeviceInfo() {
    return require("./Libraries/Utilities/DeviceInfo");
  },
  get DevSettings() {
    return require("./Libraries/Utilities/DevSettings");
  },
  get Dimensions() {
    return require("./Libraries/Utilities/Dimensions");
  },
  get Easing() {
    return require("./Libraries/Animated/Easing");
  },
  get findNodeHandle() {
    return require("./Libraries/Renderer/shims/ReactNative").findNodeHandle;
  },
  get I18nManager() {
    return require("./Libraries/ReactNative/I18nManager");
  },
  get ImagePickerIOS() {
    warnOnce('imagePickerIOS-moved', 'ImagePickerIOS has been extracted from react-native core and will be removed in a future release. ' + "Please upgrade to use either '@react-native-community/react-native-image-picker' or 'expo-image-picker'. " + "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " + 'See https://github.com/rnc-archive/react-native-image-picker-ios');
    return require("./Libraries/Image/ImagePickerIOS");
  },
  get InteractionManager() {
    return require("./Libraries/Interaction/InteractionManager");
  },
  get Keyboard() {
    return require("./Libraries/Components/Keyboard/Keyboard");
  },
  get LayoutAnimation() {
    return require("./Libraries/LayoutAnimation/LayoutAnimation");
  },
  get Linking() {
    return require("./Libraries/Linking/Linking");
  },
  get LogBox() {
    return require("./Libraries/LogBox/LogBox");
  },
  get NativeDialogManagerAndroid() {
    return require("./Libraries/NativeModules/specs/NativeDialogManagerAndroid").default;
  },
  get NativeEventEmitter() {
    return require("./Libraries/EventEmitter/NativeEventEmitter").default;
  },
  get Networking() {
    return require("./Libraries/Network/RCTNetworking");
  },
  get PanResponder() {
    return require("./Libraries/Interaction/PanResponder");
  },
  get PermissionsAndroid() {
    return require("./Libraries/PermissionsAndroid/PermissionsAndroid");
  },
  get PixelRatio() {
    return require("./Libraries/Utilities/PixelRatio");
  },
  get PushNotificationIOS() {
    warnOnce('pushNotificationIOS-moved', 'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " + 'See https://github.com/react-native-push-notification-ios/push-notification-ios');
    return require("./Libraries/PushNotificationIOS/PushNotificationIOS");
  },
  get Settings() {
    return require("./Libraries/Settings/Settings");
  },
  get Share() {
    return require("./Libraries/Share/Share");
  },
  get StyleSheet() {
    return require("./Libraries/StyleSheet/StyleSheet");
  },
  get Systrace() {
    return require("./Libraries/Performance/Systrace");
  },
  get ToastAndroid() {
    return require("./Libraries/Components/ToastAndroid/ToastAndroid");
  },
  get TurboModuleRegistry() {
    return require("./Libraries/TurboModule/TurboModuleRegistry");
  },
  get UIManager() {
    return require("./Libraries/ReactNative/UIManager");
  },
  get unstable_batchedUpdates() {
    return require("./Libraries/Renderer/shims/ReactNative").unstable_batchedUpdates;
  },
  get useColorScheme() {
    return require("./Libraries/Utilities/useColorScheme").default;
  },
  get useWindowDimensions() {
    return require("./Libraries/Utilities/useWindowDimensions").default;
  },
  get UTFSequence() {
    return require("./Libraries/UTFSequence");
  },
  get Vibration() {
    return require("./Libraries/Vibration/Vibration");
  },
  get YellowBox() {
    return require("./Libraries/YellowBox/YellowBoxDeprecated");
  },
  get DeviceEventEmitter() {
    return require("./Libraries/EventEmitter/RCTDeviceEventEmitter").default;
  },
  get DynamicColorIOS() {
    return require("./Libraries/StyleSheet/PlatformColorValueTypesIOS").DynamicColorIOS;
  },
  get NativeAppEventEmitter() {
    return require("./Libraries/EventEmitter/RCTNativeAppEventEmitter");
  },
  get NativeModules() {
    return require("./Libraries/BatchedBridge/NativeModules");
  },
  get Platform() {
    return require("./Libraries/Utilities/Platform");
  },
  get PlatformColor() {
    return require("./Libraries/StyleSheet/PlatformColorValueTypes").PlatformColor;
  },
  get processColor() {
    return require("./Libraries/StyleSheet/processColor");
  },
  get requireNativeComponent() {
    return require("./Libraries/ReactNative/requireNativeComponent");
  },
  get RootTagContext() {
    return require("./Libraries/ReactNative/RootTag").RootTagContext;
  },
  get unstable_enableLogBox() {
    return function () {
      return console.warn('LogBox is enabled by default so there is no need to call unstable_enableLogBox() anymore. This is a no op and will be removed in the next version.');
    };
  },
  get ColorPropType() {
    invariant(false, 'ColorPropType has been removed from React Native. Migrate to ' + "ColorPropType exported from 'deprecated-react-native-prop-types'.");
  },
  get EdgeInsetsPropType() {
    invariant(false, 'EdgeInsetsPropType has been removed from React Native. Migrate to ' + "EdgeInsetsPropType exported from 'deprecated-react-native-prop-types'.");
  },
  get PointPropType() {
    invariant(false, 'PointPropType has been removed from React Native. Migrate to ' + "PointPropType exported from 'deprecated-react-native-prop-types'.");
  },
  get ViewPropTypes() {
    invariant(false, 'ViewPropTypes has been removed from React Native. Migrate to ' + "ViewPropTypes exported from 'deprecated-react-native-prop-types'.");
  }
};
if (__DEV__) {
  Object.defineProperty(module.exports, 'ART', {
    configurable: true,
    get: function get() {
      invariant(false, 'ART has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/art' instead of 'react-native'. " + 'See https://github.com/react-native-art/art');
    }
  });
  Object.defineProperty(module.exports, 'ListView', {
    configurable: true,
    get: function get() {
      invariant(false, 'ListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-listview`.');
    }
  });
  Object.defineProperty(module.exports, 'SwipeableListView', {
    configurable: true,
    get: function get() {
      invariant(false, 'SwipeableListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-swipeable-listview`.');
    }
  });
  Object.defineProperty(module.exports, 'WebView', {
    configurable: true,
    get: function get() {
      invariant(false, 'WebView has been removed from React Native. ' + "It can now be installed and imported from 'react-native-webview' instead of 'react-native'. " + 'See https://github.com/react-native-webview/react-native-webview');
    }
  });
  Object.defineProperty(module.exports, 'NetInfo', {
    configurable: true,
    get: function get() {
      invariant(false, 'NetInfo has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/netinfo' instead of 'react-native'. " + 'See https://github.com/react-native-netinfo/react-native-netinfo');
    }
  });
  Object.defineProperty(module.exports, 'CameraRoll', {
    configurable: true,
    get: function get() {
      invariant(false, 'CameraRoll has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/cameraroll' instead of 'react-native'. " + 'See https://github.com/react-native-cameraroll/react-native-cameraroll');
    }
  });
  Object.defineProperty(module.exports, 'ImageStore', {
    configurable: true,
    get: function get() {
      invariant(false, 'ImageStore has been removed from React Native. ' + 'To get a base64-encoded string from a local image use either of the following third-party libraries:' + "* expo-file-system: `readAsStringAsync(filepath, 'base64')`" + "* react-native-fs: `readFile(filepath, 'base64')`");
    }
  });
  Object.defineProperty(module.exports, 'ImageEditor', {
    configurable: true,
    get: function get() {
      invariant(false, 'ImageEditor has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/image-editor' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-image-editor');
    }
  });
  Object.defineProperty(module.exports, 'TimePickerAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'TimePickerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
    }
  });
  Object.defineProperty(module.exports, 'ToolbarAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'ToolbarAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/toolbar-android' instead of 'react-native'. " + 'See https://github.com/react-native-toolbar-android/toolbar-android');
    }
  });
  Object.defineProperty(module.exports, 'ViewPagerAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'ViewPagerAndroid has been removed from React Native. ' + "It can now be installed and imported from 'react-native-pager-view' instead of 'react-native'. " + 'See https://github.com/callstack/react-native-pager-view');
    }
  });
  Object.defineProperty(module.exports, 'CheckBox', {
    configurable: true,
    get: function get() {
      invariant(false, 'CheckBox has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/checkbox' instead of 'react-native'. " + 'See https://github.com/react-native-checkbox/react-native-checkbox');
    }
  });
  Object.defineProperty(module.exports, 'SegmentedControlIOS', {
    configurable: true,
    get: function get() {
      invariant(false, 'SegmentedControlIOS has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/segmented-checkbox' instead of 'react-native'." + 'See https://github.com/react-native-segmented-control/segmented-control');
    }
  });
  Object.defineProperty(module.exports, 'StatusBarIOS', {
    configurable: true,
    get: function get() {
      invariant(false, 'StatusBarIOS has been removed from React Native. ' + 'Has been merged with StatusBar. ' + 'See https://reactnative.dev/docs/statusbar');
    }
  });
  Object.defineProperty(module.exports, 'PickerIOS', {
    configurable: true,
    get: function get() {
      invariant(false, 'PickerIOS has been removed from React Native. ' + "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " + 'See https://github.com/react-native-picker/picker');
    }
  });
  Object.defineProperty(module.exports, 'Picker', {
    configurable: true,
    get: function get() {
      invariant(false, 'Picker has been removed from React Native. ' + "It can now be installed and imported from '@react-native-picker/picker' instead of 'react-native'. " + 'See https://github.com/react-native-picker/picker');
    }
  });
  Object.defineProperty(module.exports, 'DatePickerAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'DatePickerAndroid has been removed from React Native. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-datetimepicker/datetimepicker');
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwid2Fybk9uY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiQWNjZXNzaWJpbGl0eUluZm8iLCJkZWZhdWx0IiwiQWN0aXZpdHlJbmRpY2F0b3IiLCJCdXR0b24iLCJEYXRlUGlja2VySU9TIiwiRHJhd2VyTGF5b3V0QW5kcm9pZCIsIkZsYXRMaXN0IiwiSW1hZ2UiLCJJbWFnZUJhY2tncm91bmQiLCJJbnB1dEFjY2Vzc29yeVZpZXciLCJLZXlib2FyZEF2b2lkaW5nVmlldyIsIk1hc2tlZFZpZXdJT1MiLCJNb2RhbCIsIlByZXNzYWJsZSIsIlByb2dyZXNzQmFyQW5kcm9pZCIsIlByb2dyZXNzVmlld0lPUyIsIlJlZnJlc2hDb250cm9sIiwiU2FmZUFyZWFWaWV3IiwiU2Nyb2xsVmlldyIsIlNlY3Rpb25MaXN0IiwiU2xpZGVyIiwiU3RhdHVzQmFyIiwiU3dpdGNoIiwiVGV4dCIsIlRleHRJbnB1dCIsIlRvdWNoYWJsZSIsIlRvdWNoYWJsZUhpZ2hsaWdodCIsIlRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrIiwiVG91Y2hhYmxlT3BhY2l0eSIsIlRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayIsIlZpZXciLCJWaXJ0dWFsaXplZExpc3QiLCJWaXJ0dWFsaXplZFNlY3Rpb25MaXN0IiwiQWN0aW9uU2hlZXRJT1MiLCJBbGVydCIsIkFuaW1hdGVkIiwiQXBwZWFyYW5jZSIsIkFwcFJlZ2lzdHJ5IiwiQXBwU3RhdGUiLCJBc3luY1N0b3JhZ2UiLCJCYWNrSGFuZGxlciIsIkNsaXBib2FyZCIsIkRldmljZUluZm8iLCJEZXZTZXR0aW5ncyIsIkRpbWVuc2lvbnMiLCJFYXNpbmciLCJmaW5kTm9kZUhhbmRsZSIsIkkxOG5NYW5hZ2VyIiwiSW1hZ2VQaWNrZXJJT1MiLCJJbnRlcmFjdGlvbk1hbmFnZXIiLCJLZXlib2FyZCIsIkxheW91dEFuaW1hdGlvbiIsIkxpbmtpbmciLCJMb2dCb3giLCJOYXRpdmVEaWFsb2dNYW5hZ2VyQW5kcm9pZCIsIk5hdGl2ZUV2ZW50RW1pdHRlciIsIk5ldHdvcmtpbmciLCJQYW5SZXNwb25kZXIiLCJQZXJtaXNzaW9uc0FuZHJvaWQiLCJQaXhlbFJhdGlvIiwiUHVzaE5vdGlmaWNhdGlvbklPUyIsIlNldHRpbmdzIiwiU2hhcmUiLCJTdHlsZVNoZWV0IiwiU3lzdHJhY2UiLCJUb2FzdEFuZHJvaWQiLCJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiVUlNYW5hZ2VyIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1c2VDb2xvclNjaGVtZSIsInVzZVdpbmRvd0RpbWVuc2lvbnMiLCJVVEZTZXF1ZW5jZSIsIlZpYnJhdGlvbiIsIlllbGxvd0JveCIsIkRldmljZUV2ZW50RW1pdHRlciIsIkR5bmFtaWNDb2xvcklPUyIsIk5hdGl2ZUFwcEV2ZW50RW1pdHRlciIsIk5hdGl2ZU1vZHVsZXMiLCJQbGF0Zm9ybSIsIlBsYXRmb3JtQ29sb3IiLCJwcm9jZXNzQ29sb3IiLCJyZXF1aXJlTmF0aXZlQ29tcG9uZW50IiwiUm9vdFRhZ0NvbnRleHQiLCJ1bnN0YWJsZV9lbmFibGVMb2dCb3giLCJjb25zb2xlIiwid2FybiIsIkNvbG9yUHJvcFR5cGUiLCJFZGdlSW5zZXRzUHJvcFR5cGUiLCJQb2ludFByb3BUeXBlIiwiVmlld1Byb3BUeXBlcyIsIl9fREVWX18iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImdldCJdLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IHR5cGVvZiBBY2Nlc3NpYmlsaXR5SW5mbyBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL0FjY2Vzc2liaWxpdHlJbmZvL0FjY2Vzc2liaWxpdHlJbmZvJztcbmltcG9ydCB0eXBlb2YgQWN0aXZpdHlJbmRpY2F0b3IgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY3Rpdml0eUluZGljYXRvci9BY3Rpdml0eUluZGljYXRvcic7XG5pbXBvcnQgdHlwZW9mIEJ1dHRvbiBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL0J1dHRvbic7XG5pbXBvcnQgdHlwZW9mIERhdGVQaWNrZXJJT1MgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9EYXRlUGlja2VyL0RhdGVQaWNrZXJJT1MnO1xuaW1wb3J0IHR5cGVvZiBEcmF3ZXJMYXlvdXRBbmRyb2lkIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvRHJhd2VyQW5kcm9pZC9EcmF3ZXJMYXlvdXRBbmRyb2lkJztcbmltcG9ydCB0eXBlb2YgRmxhdExpc3QgZnJvbSAnLi9MaWJyYXJpZXMvTGlzdHMvRmxhdExpc3QnO1xuaW1wb3J0IHR5cGVvZiBJbWFnZSBmcm9tICcuL0xpYnJhcmllcy9JbWFnZS9JbWFnZSc7XG5pbXBvcnQgdHlwZW9mIEltYWdlQmFja2dyb3VuZCBmcm9tICcuL0xpYnJhcmllcy9JbWFnZS9JbWFnZUJhY2tncm91bmQnO1xuaW1wb3J0IHR5cGVvZiBJbnB1dEFjY2Vzc29yeVZpZXcgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvSW5wdXRBY2Nlc3NvcnlWaWV3JztcbmltcG9ydCB0eXBlb2YgS2V5Ym9hcmRBdm9pZGluZ1ZpZXcgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9LZXlib2FyZC9LZXlib2FyZEF2b2lkaW5nVmlldyc7XG5pbXBvcnQgdHlwZW9mIE1hc2tlZFZpZXdJT1MgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9NYXNrZWRWaWV3L01hc2tlZFZpZXdJT1MnO1xuaW1wb3J0IHR5cGVvZiBNb2RhbCBmcm9tICcuL0xpYnJhcmllcy9Nb2RhbC9Nb2RhbCc7XG5pbXBvcnQgdHlwZW9mIFByZXNzYWJsZSBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1ByZXNzYWJsZS9QcmVzc2FibGUnO1xuaW1wb3J0IHR5cGVvZiBQcm9ncmVzc0JhckFuZHJvaWQgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Qcm9ncmVzc0JhckFuZHJvaWQvUHJvZ3Jlc3NCYXJBbmRyb2lkJztcbmltcG9ydCB0eXBlb2YgUHJvZ3Jlc3NWaWV3SU9TIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvUHJvZ3Jlc3NWaWV3SU9TL1Byb2dyZXNzVmlld0lPUyc7XG5pbXBvcnQgdHlwZW9mIFJlZnJlc2hDb250cm9sIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvUmVmcmVzaENvbnRyb2wnO1xuaW1wb3J0IHR5cGVvZiBTYWZlQXJlYVZpZXcgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TYWZlQXJlYVZpZXcvU2FmZUFyZWFWaWV3JztcbmltcG9ydCB0eXBlb2YgU2Nyb2xsVmlldyBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1Njcm9sbFZpZXcvU2Nyb2xsVmlldyc7XG5pbXBvcnQgdHlwZW9mIFNlY3Rpb25MaXN0IGZyb20gJy4vTGlicmFyaWVzL0xpc3RzL1NlY3Rpb25MaXN0JztcbmltcG9ydCB0eXBlb2YgU2xpZGVyIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvU2xpZGVyL1NsaWRlcic7XG5pbXBvcnQgdHlwZW9mIFN0YXR1c0JhciBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1N0YXR1c0Jhci9TdGF0dXNCYXInO1xuaW1wb3J0IHR5cGVvZiBTd2l0Y2ggZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Td2l0Y2gvU3dpdGNoJztcbmltcG9ydCB0eXBlb2YgVGV4dCBmcm9tICcuL0xpYnJhcmllcy9UZXh0L1RleHQnO1xuaW1wb3J0IHR5cGVvZiBUZXh0SW5wdXQgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0JztcbmltcG9ydCB0eXBlb2YgVG91Y2hhYmxlIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZSc7XG5pbXBvcnQgdHlwZW9mIFRvdWNoYWJsZUhpZ2hsaWdodCBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVIaWdobGlnaHQnO1xuaW1wb3J0IHR5cGVvZiBUb3VjaGFibGVOYXRpdmVGZWVkYmFjayBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVOYXRpdmVGZWVkYmFjayc7XG5pbXBvcnQgdHlwZW9mIFRvdWNoYWJsZU9wYWNpdHkgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlT3BhY2l0eSc7XG5pbXBvcnQgdHlwZW9mIFRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayBmcm9tICcuL0xpYnJhcmllcy9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2snO1xuaW1wb3J0IHR5cGVvZiBWaWV3IGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVmlldy9WaWV3JztcbmltcG9ydCB0eXBlb2YgVmlydHVhbGl6ZWRMaXN0IGZyb20gJy4vTGlicmFyaWVzL0xpc3RzL1ZpcnR1YWxpemVkTGlzdCc7XG5pbXBvcnQgdHlwZW9mIFZpcnR1YWxpemVkU2VjdGlvbkxpc3QgZnJvbSAnLi9MaWJyYXJpZXMvTGlzdHMvVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCc7XG5cbi8vIEFQSXNcbmltcG9ydCB0eXBlb2YgQWN0aW9uU2hlZXRJT1MgZnJvbSAnLi9MaWJyYXJpZXMvQWN0aW9uU2hlZXRJT1MvQWN0aW9uU2hlZXRJT1MnO1xuaW1wb3J0IHR5cGVvZiBBbGVydCBmcm9tICcuL0xpYnJhcmllcy9BbGVydC9BbGVydCc7XG5pbXBvcnQgdHlwZW9mIEFuaW1hdGVkIGZyb20gJy4vTGlicmFyaWVzL0FuaW1hdGVkL0FuaW1hdGVkJztcbmltcG9ydCB0eXBlb2YgQXBwZWFyYW5jZSBmcm9tICcuL0xpYnJhcmllcy9VdGlsaXRpZXMvQXBwZWFyYW5jZSc7XG5pbXBvcnQgdHlwZW9mIEFwcFJlZ2lzdHJ5IGZyb20gJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL0FwcFJlZ2lzdHJ5JztcbmltcG9ydCB0eXBlb2YgQXBwU3RhdGUgZnJvbSAnLi9MaWJyYXJpZXMvQXBwU3RhdGUvQXBwU3RhdGUnO1xuaW1wb3J0IHR5cGVvZiBBc3luY1N0b3JhZ2UgZnJvbSAnLi9MaWJyYXJpZXMvU3RvcmFnZS9Bc3luY1N0b3JhZ2UnO1xuaW1wb3J0IHR5cGVvZiBCYWNrSGFuZGxlciBmcm9tICcuL0xpYnJhcmllcy9VdGlsaXRpZXMvQmFja0hhbmRsZXInO1xuaW1wb3J0IHR5cGVvZiBDbGlwYm9hcmQgZnJvbSAnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9DbGlwYm9hcmQvQ2xpcGJvYXJkJztcbmltcG9ydCB0eXBlb2YgRGV2aWNlSW5mbyBmcm9tICcuL0xpYnJhcmllcy9VdGlsaXRpZXMvRGV2aWNlSW5mbyc7XG5pbXBvcnQgdHlwZW9mIERldlNldHRpbmdzIGZyb20gJy4vTGlicmFyaWVzL1V0aWxpdGllcy9EZXZTZXR0aW5ncyc7XG5pbXBvcnQgdHlwZW9mIERpbWVuc2lvbnMgZnJvbSAnLi9MaWJyYXJpZXMvVXRpbGl0aWVzL0RpbWVuc2lvbnMnO1xuaW1wb3J0IHR5cGVvZiBFYXNpbmcgZnJvbSAnLi9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJztcbmltcG9ydCB0eXBlb2YgUmVhY3ROYXRpdmUgZnJvbSAnLi9MaWJyYXJpZXMvUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmUnO1xuaW1wb3J0IHR5cGVvZiBJMThuTWFuYWdlciBmcm9tICcuL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9JMThuTWFuYWdlcic7XG5pbXBvcnQgdHlwZW9mIEltYWdlUGlja2VySU9TIGZyb20gJy4vTGlicmFyaWVzL0ltYWdlL0ltYWdlUGlja2VySU9TJztcbmltcG9ydCB0eXBlb2YgSW50ZXJhY3Rpb25NYW5hZ2VyIGZyb20gJy4vTGlicmFyaWVzL0ludGVyYWN0aW9uL0ludGVyYWN0aW9uTWFuYWdlcic7XG5pbXBvcnQgdHlwZW9mIEtleWJvYXJkIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvS2V5Ym9hcmQvS2V5Ym9hcmQnO1xuaW1wb3J0IHR5cGVvZiBMYXlvdXRBbmltYXRpb24gZnJvbSAnLi9MaWJyYXJpZXMvTGF5b3V0QW5pbWF0aW9uL0xheW91dEFuaW1hdGlvbic7XG5pbXBvcnQgdHlwZW9mIExpbmtpbmcgZnJvbSAnLi9MaWJyYXJpZXMvTGlua2luZy9MaW5raW5nJztcbmltcG9ydCB0eXBlb2YgTG9nQm94IGZyb20gJy4vTGlicmFyaWVzL0xvZ0JveC9Mb2dCb3gnO1xuaW1wb3J0IHR5cGVvZiBOYXRpdmVEaWFsb2dNYW5hZ2VyQW5kcm9pZCBmcm9tICcuL0xpYnJhcmllcy9OYXRpdmVNb2R1bGVzL3NwZWNzL05hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkJztcbmltcG9ydCB0eXBlb2YgTmF0aXZlRXZlbnRFbWl0dGVyIGZyb20gJy4vTGlicmFyaWVzL0V2ZW50RW1pdHRlci9OYXRpdmVFdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGVvZiBOZXR3b3JraW5nIGZyb20gJy4vTGlicmFyaWVzL05ldHdvcmsvUkNUTmV0d29ya2luZyc7XG5pbXBvcnQgdHlwZW9mIFBhblJlc3BvbmRlciBmcm9tICcuL0xpYnJhcmllcy9JbnRlcmFjdGlvbi9QYW5SZXNwb25kZXInO1xuaW1wb3J0IHR5cGVvZiBQZXJtaXNzaW9uc0FuZHJvaWQgZnJvbSAnLi9MaWJyYXJpZXMvUGVybWlzc2lvbnNBbmRyb2lkL1Blcm1pc3Npb25zQW5kcm9pZCc7XG5pbXBvcnQgdHlwZW9mIFBpeGVsUmF0aW8gZnJvbSAnLi9MaWJyYXJpZXMvVXRpbGl0aWVzL1BpeGVsUmF0aW8nO1xuaW1wb3J0IHR5cGVvZiBQdXNoTm90aWZpY2F0aW9uSU9TIGZyb20gJy4vTGlicmFyaWVzL1B1c2hOb3RpZmljYXRpb25JT1MvUHVzaE5vdGlmaWNhdGlvbklPUyc7XG5pbXBvcnQgdHlwZW9mIFNldHRpbmdzIGZyb20gJy4vTGlicmFyaWVzL1NldHRpbmdzL1NldHRpbmdzJztcbmltcG9ydCB0eXBlb2YgU2hhcmUgZnJvbSAnLi9MaWJyYXJpZXMvU2hhcmUvU2hhcmUnO1xuaW1wb3J0IHR5cGVvZiBTdHlsZVNoZWV0IGZyb20gJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZW9mIFN5c3RyYWNlIGZyb20gJy4vTGlicmFyaWVzL1BlcmZvcm1hbmNlL1N5c3RyYWNlJztcbmltcG9ydCB0eXBlb2YgVG9hc3RBbmRyb2lkIGZyb20gJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVG9hc3RBbmRyb2lkL1RvYXN0QW5kcm9pZCc7XG5pbXBvcnQgdHlwZW9mICogYXMgVHVyYm9Nb2R1bGVSZWdpc3RyeSBmcm9tICcuL0xpYnJhcmllcy9UdXJib01vZHVsZS9UdXJib01vZHVsZVJlZ2lzdHJ5JztcbmltcG9ydCB0eXBlb2YgVUlNYW5hZ2VyIGZyb20gJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5pbXBvcnQgdHlwZW9mIHVzZUNvbG9yU2NoZW1lIGZyb20gJy4vTGlicmFyaWVzL1V0aWxpdGllcy91c2VDb2xvclNjaGVtZSc7XG5pbXBvcnQgdHlwZW9mIHVzZVdpbmRvd0RpbWVuc2lvbnMgZnJvbSAnLi9MaWJyYXJpZXMvVXRpbGl0aWVzL3VzZVdpbmRvd0RpbWVuc2lvbnMnO1xuaW1wb3J0IHR5cGVvZiBVVEZTZXF1ZW5jZSBmcm9tICcuL0xpYnJhcmllcy9VVEZTZXF1ZW5jZSc7XG5pbXBvcnQgdHlwZW9mIFZpYnJhdGlvbiBmcm9tICcuL0xpYnJhcmllcy9WaWJyYXRpb24vVmlicmF0aW9uJztcbmltcG9ydCB0eXBlb2YgWWVsbG93Qm94IGZyb20gJy4vTGlicmFyaWVzL1llbGxvd0JveC9ZZWxsb3dCb3hEZXByZWNhdGVkJztcblxuLy8gUGx1Z2luc1xuaW1wb3J0IHR5cGVvZiB7RHluYW1pY0NvbG9ySU9TfSBmcm9tICcuL0xpYnJhcmllcy9TdHlsZVNoZWV0L1BsYXRmb3JtQ29sb3JWYWx1ZVR5cGVzSU9TJztcbmltcG9ydCB0eXBlb2YgTmF0aXZlTW9kdWxlcyBmcm9tICcuL0xpYnJhcmllcy9CYXRjaGVkQnJpZGdlL05hdGl2ZU1vZHVsZXMnO1xuaW1wb3J0IHR5cGVvZiBQbGF0Zm9ybSBmcm9tICcuL0xpYnJhcmllcy9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IHR5cGVvZiB7UGxhdGZvcm1Db2xvcn0gZnJvbSAnLi9MaWJyYXJpZXMvU3R5bGVTaGVldC9QbGF0Zm9ybUNvbG9yVmFsdWVUeXBlcyc7XG5pbXBvcnQgdHlwZW9mIHByb2Nlc3NDb2xvciBmcm9tICcuL0xpYnJhcmllcy9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcic7XG5pbXBvcnQgdHlwZW9mIFJDVERldmljZUV2ZW50RW1pdHRlciBmcm9tICcuL0xpYnJhcmllcy9FdmVudEVtaXR0ZXIvUkNURGV2aWNlRXZlbnRFbWl0dGVyJztcbmltcG9ydCB0eXBlb2YgUkNUTmF0aXZlQXBwRXZlbnRFbWl0dGVyIGZyb20gJy4vTGlicmFyaWVzL0V2ZW50RW1pdHRlci9SQ1ROYXRpdmVBcHBFdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGVvZiB7Um9vdFRhZ0NvbnRleHR9IGZyb20gJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL1Jvb3RUYWcnO1xuXG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudCBhcyBfSG9zdENvbXBvbmVudEludGVybmFsfSBmcm9tICcuL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZVR5cGVzJztcblxuZXhwb3J0IHR5cGUgSG9zdENvbXBvbmVudDxUPiA9IF9Ib3N0Q29tcG9uZW50SW50ZXJuYWw8VD47XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuY29uc3Qgd2Fybk9uY2UgPSByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvd2Fybk9uY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIENvbXBvbmVudHNcbiAgZ2V0IEFjY2Vzc2liaWxpdHlJbmZvKCk6IEFjY2Vzc2liaWxpdHlJbmZvIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY2Nlc3NpYmlsaXR5SW5mby9BY2Nlc3NpYmlsaXR5SW5mbycpXG4gICAgICAuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IEFjdGl2aXR5SW5kaWNhdG9yKCk6IEFjdGl2aXR5SW5kaWNhdG9yIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9BY3Rpdml0eUluZGljYXRvci9BY3Rpdml0eUluZGljYXRvcicpO1xuICB9LFxuICBnZXQgQnV0dG9uKCk6IEJ1dHRvbiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvQnV0dG9uJyk7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdmFsdWUtYXMtdHlwZV1cbiAgZ2V0IERhdGVQaWNrZXJJT1MoKTogRGF0ZVBpY2tlcklPUyB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnRGF0ZVBpY2tlcklPUy1tZXJnZWQnLFxuICAgICAgJ0RhdGVQaWNrZXJJT1MgaGFzIGJlZW4gbWVyZ2VkIHdpdGggRGF0ZVBpY2tlckFuZHJvaWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvZGF0ZXRpbWVwaWNrZXInIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWRhdGV0aW1lcGlja2VyL2RhdGV0aW1lcGlja2VyJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL0RhdGVQaWNrZXIvRGF0ZVBpY2tlcklPUycpO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3ZhbHVlLWFzLXR5cGVdXG4gIGdldCBEcmF3ZXJMYXlvdXRBbmRyb2lkKCk6IERyYXdlckxheW91dEFuZHJvaWQge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL0RyYXdlckFuZHJvaWQvRHJhd2VyTGF5b3V0QW5kcm9pZCcpO1xuICB9LFxuICBnZXQgRmxhdExpc3QoKTogRmxhdExpc3Qge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9MaXN0cy9GbGF0TGlzdCcpO1xuICB9LFxuICBnZXQgSW1hZ2UoKTogSW1hZ2Uge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9JbWFnZS9JbWFnZScpO1xuICB9LFxuICBnZXQgSW1hZ2VCYWNrZ3JvdW5kKCk6IEltYWdlQmFja2dyb3VuZCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0ltYWdlL0ltYWdlQmFja2dyb3VuZCcpO1xuICB9LFxuICBnZXQgSW5wdXRBY2Nlc3NvcnlWaWV3KCk6IElucHV0QWNjZXNzb3J5VmlldyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVGV4dElucHV0L0lucHV0QWNjZXNzb3J5VmlldycpO1xuICB9LFxuICBnZXQgS2V5Ym9hcmRBdm9pZGluZ1ZpZXcoKTogS2V5Ym9hcmRBdm9pZGluZ1ZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL0tleWJvYXJkL0tleWJvYXJkQXZvaWRpbmdWaWV3JylcbiAgICAgIC5kZWZhdWx0O1xuICB9LFxuICBnZXQgTWFza2VkVmlld0lPUygpOiBNYXNrZWRWaWV3SU9TIHtcbiAgICB3YXJuT25jZShcbiAgICAgICdtYXNrZWR2aWV3aW9zLW1vdmVkJyxcbiAgICAgICdNYXNrZWRWaWV3SU9TIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtbWFza2VkLXZpZXcvbWFza2VkLXZpZXcnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLW1hc2tlZC12aWV3L21hc2tlZC12aWV3JyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL01hc2tlZFZpZXcvTWFza2VkVmlld0lPUycpO1xuICB9LFxuICBnZXQgTW9kYWwoKTogTW9kYWwge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Nb2RhbC9Nb2RhbCcpO1xuICB9LFxuICBnZXQgUHJlc3NhYmxlKCk6IFByZXNzYWJsZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvUHJlc3NhYmxlL1ByZXNzYWJsZScpLmRlZmF1bHQ7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdmFsdWUtYXMtdHlwZV1cbiAgZ2V0IFByb2dyZXNzQmFyQW5kcm9pZCgpOiBQcm9ncmVzc0JhckFuZHJvaWQge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ3Byb2dyZXNzLWJhci1hbmRyb2lkLW1vdmVkJyxcbiAgICAgICdQcm9ncmVzc0JhckFuZHJvaWQgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcHJvZ3Jlc3MtYmFyLWFuZHJvaWQnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLXByb2dyZXNzLXZpZXcvcHJvZ3Jlc3MtYmFyLWFuZHJvaWQnLFxuICAgICk7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvUHJvZ3Jlc3NCYXJBbmRyb2lkL1Byb2dyZXNzQmFyQW5kcm9pZCcpO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3ZhbHVlLWFzLXR5cGVdXG4gIGdldCBQcm9ncmVzc1ZpZXdJT1MoKTogUHJvZ3Jlc3NWaWV3SU9TIHtcbiAgICB3YXJuT25jZShcbiAgICAgICdwcm9ncmVzcy12aWV3LWlvcy1tb3ZlZCcsXG4gICAgICAnUHJvZ3Jlc3NWaWV3SU9TIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L3Byb2dyZXNzLXZpZXcnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLXByb2dyZXNzLXZpZXcvcHJvZ3Jlc3MtdmlldycsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Qcm9ncmVzc1ZpZXdJT1MvUHJvZ3Jlc3NWaWV3SU9TJyk7XG4gIH0sXG4gIGdldCBSZWZyZXNoQ29udHJvbCgpOiBSZWZyZXNoQ29udHJvbCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvUmVmcmVzaENvbnRyb2wnKTtcbiAgfSxcbiAgZ2V0IFNhZmVBcmVhVmlldygpOiBTYWZlQXJlYVZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1NhZmVBcmVhVmlldy9TYWZlQXJlYVZpZXcnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgU2Nyb2xsVmlldygpOiBTY3JvbGxWaWV3IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnKTtcbiAgfSxcbiAgZ2V0IFNlY3Rpb25MaXN0KCk6IFNlY3Rpb25MaXN0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvTGlzdHMvU2VjdGlvbkxpc3QnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgU2xpZGVyKCk6IFNsaWRlciB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnc2xpZGVyLW1vdmVkJyxcbiAgICAgICdTbGlkZXIgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvc2xpZGVyJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NhbGxzdGFjay9yZWFjdC1uYXRpdmUtc2xpZGVyJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1NsaWRlci9TbGlkZXInKTtcbiAgfSxcbiAgZ2V0IFN0YXR1c0JhcigpOiBTdGF0dXNCYXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1N0YXR1c0Jhci9TdGF0dXNCYXInKTtcbiAgfSxcbiAgZ2V0IFN3aXRjaCgpOiBTd2l0Y2gge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1N3aXRjaC9Td2l0Y2gnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgVGV4dCgpOiBUZXh0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvVGV4dC9UZXh0Jyk7XG4gIH0sXG4gIGdldCBUZXh0SW5wdXQoKTogVGV4dElucHV0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGUoKTogVG91Y2hhYmxlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlJyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVIaWdobGlnaHQoKTogVG91Y2hhYmxlSGlnaGxpZ2h0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlSGlnaGxpZ2h0Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVOYXRpdmVGZWVkYmFjaygpOiBUb3VjaGFibGVOYXRpdmVGZWVkYmFjayB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrJyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVPcGFjaXR5KCk6IFRvdWNoYWJsZU9wYWNpdHkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVPcGFjaXR5Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2soKTogVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrJyk7XG4gIH0sXG4gIGdldCBWaWV3KCk6IFZpZXcge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldycpO1xuICB9LFxuICBnZXQgVmlydHVhbGl6ZWRMaXN0KCk6IFZpcnR1YWxpemVkTGlzdCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xpc3RzL1ZpcnR1YWxpemVkTGlzdCcpO1xuICB9LFxuICBnZXQgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCgpOiBWaXJ0dWFsaXplZFNlY3Rpb25MaXN0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvTGlzdHMvVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCcpO1xuICB9LFxuXG4gIC8vIEFQSXNcbiAgZ2V0IEFjdGlvblNoZWV0SU9TKCk6IEFjdGlvblNoZWV0SU9TIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQWN0aW9uU2hlZXRJT1MvQWN0aW9uU2hlZXRJT1MnKTtcbiAgfSxcbiAgZ2V0IEFsZXJ0KCk6IEFsZXJ0IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQWxlcnQvQWxlcnQnKTtcbiAgfSxcbiAgZ2V0IEFuaW1hdGVkKCk6IEFuaW1hdGVkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQW5pbWF0ZWQvQW5pbWF0ZWQnKTtcbiAgfSxcbiAgZ2V0IEFwcGVhcmFuY2UoKTogQXBwZWFyYW5jZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy9BcHBlYXJhbmNlJyk7XG4gIH0sXG4gIGdldCBBcHBSZWdpc3RyeSgpOiBBcHBSZWdpc3RyeSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL0FwcFJlZ2lzdHJ5Jyk7XG4gIH0sXG4gIGdldCBBcHBTdGF0ZSgpOiBBcHBTdGF0ZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0FwcFN0YXRlL0FwcFN0YXRlJyk7XG4gIH0sXG4gIC8vICRGbG93Rml4TWVbdmFsdWUtYXMtdHlwZV1cbiAgZ2V0IEFzeW5jU3RvcmFnZSgpOiBBc3luY1N0b3JhZ2Uge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ2FzeW5jLXN0b3JhZ2UtbW92ZWQnLFxuICAgICAgJ0FzeW5jU3RvcmFnZSBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UvYXN5bmMtc3RvcmFnZScgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtYXN5bmMtc3RvcmFnZS9hc3luYy1zdG9yYWdlJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9TdG9yYWdlL0FzeW5jU3RvcmFnZScpO1xuICB9LFxuICBnZXQgQmFja0hhbmRsZXIoKTogQmFja0hhbmRsZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvQmFja0hhbmRsZXInKTtcbiAgfSxcbiAgZ2V0IENsaXBib2FyZCgpOiBDbGlwYm9hcmQge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ2NsaXBib2FyZC1tb3ZlZCcsXG4gICAgICAnQ2xpcGJvYXJkIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY2xpcGJvYXJkL2NsaXBib2FyZCcgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtY2xpcGJvYXJkL2NsaXBib2FyZCcsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9DbGlwYm9hcmQvQ2xpcGJvYXJkJyk7XG4gIH0sXG4gIGdldCBEZXZpY2VJbmZvKCk6IERldmljZUluZm8ge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvRGV2aWNlSW5mbycpO1xuICB9LFxuICBnZXQgRGV2U2V0dGluZ3MoKTogRGV2U2V0dGluZ3Mge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvRGV2U2V0dGluZ3MnKTtcbiAgfSxcbiAgZ2V0IERpbWVuc2lvbnMoKTogRGltZW5zaW9ucyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy9EaW1lbnNpb25zJyk7XG4gIH0sXG4gIGdldCBFYXNpbmcoKTogRWFzaW5nIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQW5pbWF0ZWQvRWFzaW5nJyk7XG4gIH0sXG4gIGdldCBmaW5kTm9kZUhhbmRsZSgpOiAkUHJvcGVydHlUeXBlPFJlYWN0TmF0aXZlLCAnZmluZE5vZGVIYW5kbGUnPiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykuZmluZE5vZGVIYW5kbGU7XG4gIH0sXG4gIGdldCBJMThuTWFuYWdlcigpOiBJMThuTWFuYWdlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1JlYWN0TmF0aXZlL0kxOG5NYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBJbWFnZVBpY2tlcklPUygpOiBJbWFnZVBpY2tlcklPUyB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnaW1hZ2VQaWNrZXJJT1MtbW92ZWQnLFxuICAgICAgJ0ltYWdlUGlja2VySU9TIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiUGxlYXNlIHVwZ3JhZGUgdG8gdXNlIGVpdGhlciAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWltYWdlLXBpY2tlcicgb3IgJ2V4cG8taW1hZ2UtcGlja2VyJy4gXCIgK1xuICAgICAgICBcIklmIHlvdSBjYW5ub3QgdXBncmFkZSB0byBhIGRpZmZlcmVudCBsaWJyYXJ5LCBwbGVhc2UgaW5zdGFsbCB0aGUgZGVwcmVjYXRlZCAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvaW1hZ2UtcGlja2VyLWlvcycgcGFja2FnZS4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ybmMtYXJjaGl2ZS9yZWFjdC1uYXRpdmUtaW1hZ2UtcGlja2VyLWlvcycsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2VQaWNrZXJJT1MnKTtcbiAgfSxcbiAgZ2V0IEludGVyYWN0aW9uTWFuYWdlcigpOiBJbnRlcmFjdGlvbk1hbmFnZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9JbnRlcmFjdGlvbi9JbnRlcmFjdGlvbk1hbmFnZXInKTtcbiAgfSxcbiAgZ2V0IEtleWJvYXJkKCk6IEtleWJvYXJkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9LZXlib2FyZC9LZXlib2FyZCcpO1xuICB9LFxuICBnZXQgTGF5b3V0QW5pbWF0aW9uKCk6IExheW91dEFuaW1hdGlvbiB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xheW91dEFuaW1hdGlvbi9MYXlvdXRBbmltYXRpb24nKTtcbiAgfSxcbiAgZ2V0IExpbmtpbmcoKTogTGlua2luZyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xpbmtpbmcvTGlua2luZycpO1xuICB9LFxuICBnZXQgTG9nQm94KCk6IExvZ0JveCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0xvZ0JveC9Mb2dCb3gnKTtcbiAgfSxcbiAgZ2V0IE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkKCk6IE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvTmF0aXZlTW9kdWxlcy9zcGVjcy9OYXRpdmVEaWFsb2dNYW5hZ2VyQW5kcm9pZCcpXG4gICAgICAuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IE5hdGl2ZUV2ZW50RW1pdHRlcigpOiBOYXRpdmVFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9FdmVudEVtaXR0ZXIvTmF0aXZlRXZlbnRFbWl0dGVyJykuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IE5ldHdvcmtpbmcoKTogTmV0d29ya2luZyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL05ldHdvcmsvUkNUTmV0d29ya2luZycpO1xuICB9LFxuICBnZXQgUGFuUmVzcG9uZGVyKCk6IFBhblJlc3BvbmRlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0ludGVyYWN0aW9uL1BhblJlc3BvbmRlcicpO1xuICB9LFxuICBnZXQgUGVybWlzc2lvbnNBbmRyb2lkKCk6IFBlcm1pc3Npb25zQW5kcm9pZCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1Blcm1pc3Npb25zQW5kcm9pZC9QZXJtaXNzaW9uc0FuZHJvaWQnKTtcbiAgfSxcbiAgZ2V0IFBpeGVsUmF0aW8oKTogUGl4ZWxSYXRpbyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy9QaXhlbFJhdGlvJyk7XG4gIH0sXG4gIGdldCBQdXNoTm90aWZpY2F0aW9uSU9TKCk6IFB1c2hOb3RpZmljYXRpb25JT1Mge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ3B1c2hOb3RpZmljYXRpb25JT1MtbW92ZWQnLFxuICAgICAgJ1B1c2hOb3RpZmljYXRpb25JT1MgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcHVzaC1ub3RpZmljYXRpb24taW9zJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1wdXNoLW5vdGlmaWNhdGlvbi1pb3MvcHVzaC1ub3RpZmljYXRpb24taW9zJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9QdXNoTm90aWZpY2F0aW9uSU9TL1B1c2hOb3RpZmljYXRpb25JT1MnKTtcbiAgfSxcbiAgZ2V0IFNldHRpbmdzKCk6IFNldHRpbmdzIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvU2V0dGluZ3MvU2V0dGluZ3MnKTtcbiAgfSxcbiAgZ2V0IFNoYXJlKCk6IFNoYXJlIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvU2hhcmUvU2hhcmUnKTtcbiAgfSxcbiAgZ2V0IFN0eWxlU2hlZXQoKTogU3R5bGVTaGVldCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvU3R5bGVTaGVldCcpO1xuICB9LFxuICBnZXQgU3lzdHJhY2UoKTogU3lzdHJhY2Uge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9QZXJmb3JtYW5jZS9TeXN0cmFjZScpO1xuICB9LFxuICAvLyAkRmxvd0ZpeE1lW3ZhbHVlLWFzLXR5cGVdXG4gIGdldCBUb2FzdEFuZHJvaWQoKTogVG9hc3RBbmRyb2lkIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub2FzdEFuZHJvaWQvVG9hc3RBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBUdXJib01vZHVsZVJlZ2lzdHJ5KCk6IFR1cmJvTW9kdWxlUmVnaXN0cnkge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9UdXJib01vZHVsZS9UdXJib01vZHVsZVJlZ2lzdHJ5Jyk7XG4gIH0sXG4gIGdldCBVSU1hbmFnZXIoKTogVUlNYW5hZ2VyIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvVUlNYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcygpOiAkUHJvcGVydHlUeXBlPFxuICAgIFJlYWN0TmF0aXZlLFxuICAgICd1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcycsXG4gID4ge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpXG4gICAgICAudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM7XG4gIH0sXG4gIGdldCB1c2VDb2xvclNjaGVtZSgpOiB1c2VDb2xvclNjaGVtZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1V0aWxpdGllcy91c2VDb2xvclNjaGVtZScpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCB1c2VXaW5kb3dEaW1lbnNpb25zKCk6IHVzZVdpbmRvd0RpbWVuc2lvbnMge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9VdGlsaXRpZXMvdXNlV2luZG93RGltZW5zaW9ucycpLmRlZmF1bHQ7XG4gIH0sXG4gIGdldCBVVEZTZXF1ZW5jZSgpOiBVVEZTZXF1ZW5jZSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1VURlNlcXVlbmNlJyk7XG4gIH0sXG4gIGdldCBWaWJyYXRpb24oKTogVmlicmF0aW9uIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvVmlicmF0aW9uL1ZpYnJhdGlvbicpO1xuICB9LFxuICBnZXQgWWVsbG93Qm94KCk6IFllbGxvd0JveCB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1llbGxvd0JveC9ZZWxsb3dCb3hEZXByZWNhdGVkJyk7XG4gIH0sXG5cbiAgLy8gUGx1Z2luc1xuICBnZXQgRGV2aWNlRXZlbnRFbWl0dGVyKCk6IFJDVERldmljZUV2ZW50RW1pdHRlciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL0V2ZW50RW1pdHRlci9SQ1REZXZpY2VFdmVudEVtaXR0ZXInKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgRHluYW1pY0NvbG9ySU9TKCk6IER5bmFtaWNDb2xvcklPUyB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvUGxhdGZvcm1Db2xvclZhbHVlVHlwZXNJT1MnKVxuICAgICAgLkR5bmFtaWNDb2xvcklPUztcbiAgfSxcbiAgZ2V0IE5hdGl2ZUFwcEV2ZW50RW1pdHRlcigpOiBSQ1ROYXRpdmVBcHBFdmVudEVtaXR0ZXIge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9FdmVudEVtaXR0ZXIvUkNUTmF0aXZlQXBwRXZlbnRFbWl0dGVyJyk7XG4gIH0sXG4gIGdldCBOYXRpdmVNb2R1bGVzKCk6IE5hdGl2ZU1vZHVsZXMge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9CYXRjaGVkQnJpZGdlL05hdGl2ZU1vZHVsZXMnKTtcbiAgfSxcbiAgZ2V0IFBsYXRmb3JtKCk6IFBsYXRmb3JtIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG4gIH0sXG4gIGdldCBQbGF0Zm9ybUNvbG9yKCk6IFBsYXRmb3JtQ29sb3Ige1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9TdHlsZVNoZWV0L1BsYXRmb3JtQ29sb3JWYWx1ZVR5cGVzJylcbiAgICAgIC5QbGF0Zm9ybUNvbG9yO1xuICB9LFxuICBnZXQgcHJvY2Vzc0NvbG9yKCk6IHByb2Nlc3NDb2xvciB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4vTGlicmFyaWVzL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyk7XG4gIH0sXG4gIGdldCByZXF1aXJlTmF0aXZlQ29tcG9uZW50KCk6IDxUPihcbiAgICB1aVZpZXdDbGFzc05hbWU6IHN0cmluZyxcbiAgKSA9PiBIb3N0Q29tcG9uZW50PFQ+IHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi9MaWJyYXJpZXMvUmVhY3ROYXRpdmUvcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCcpO1xuICB9LFxuICBnZXQgUm9vdFRhZ0NvbnRleHQoKTogUm9vdFRhZ0NvbnRleHQge1xuICAgIHJldHVybiByZXF1aXJlKCcuL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9Sb290VGFnJykuUm9vdFRhZ0NvbnRleHQ7XG4gIH0sXG4gIGdldCB1bnN0YWJsZV9lbmFibGVMb2dCb3goKTogKCkgPT4gdm9pZCB7XG4gICAgcmV0dXJuICgpID0+XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdMb2dCb3ggaXMgZW5hYmxlZCBieSBkZWZhdWx0IHNvIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCB1bnN0YWJsZV9lbmFibGVMb2dCb3goKSBhbnltb3JlLiBUaGlzIGlzIGEgbm8gb3AgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCB2ZXJzaW9uLicsXG4gICAgICApO1xuICB9LFxuICAvLyBEZXByZWNhdGVkIFByb3AgVHlwZXNcbiAgZ2V0IENvbG9yUHJvcFR5cGUoKTogJEZsb3dGaXhNZSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ29sb3JQcm9wVHlwZSBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiBNaWdyYXRlIHRvICcgK1xuICAgICAgICBcIkNvbG9yUHJvcFR5cGUgZXhwb3J0ZWQgZnJvbSAnZGVwcmVjYXRlZC1yZWFjdC1uYXRpdmUtcHJvcC10eXBlcycuXCIsXG4gICAgKTtcbiAgfSxcbiAgZ2V0IEVkZ2VJbnNldHNQcm9wVHlwZSgpOiAkRmxvd0ZpeE1lIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdFZGdlSW5zZXRzUHJvcFR5cGUgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gTWlncmF0ZSB0byAnICtcbiAgICAgICAgXCJFZGdlSW5zZXRzUHJvcFR5cGUgZXhwb3J0ZWQgZnJvbSAnZGVwcmVjYXRlZC1yZWFjdC1uYXRpdmUtcHJvcC10eXBlcycuXCIsXG4gICAgKTtcbiAgfSxcbiAgZ2V0IFBvaW50UHJvcFR5cGUoKTogJEZsb3dGaXhNZSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnUG9pbnRQcm9wVHlwZSBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiBNaWdyYXRlIHRvICcgK1xuICAgICAgICBcIlBvaW50UHJvcFR5cGUgZXhwb3J0ZWQgZnJvbSAnZGVwcmVjYXRlZC1yZWFjdC1uYXRpdmUtcHJvcC10eXBlcycuXCIsXG4gICAgKTtcbiAgfSxcbiAgZ2V0IFZpZXdQcm9wVHlwZXMoKTogJEZsb3dGaXhNZSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnVmlld1Byb3BUeXBlcyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiBNaWdyYXRlIHRvICcgK1xuICAgICAgICBcIlZpZXdQcm9wVHlwZXMgZXhwb3J0ZWQgZnJvbSAnZGVwcmVjYXRlZC1yZWFjdC1uYXRpdmUtcHJvcC10eXBlcycuXCIsXG4gICAgKTtcbiAgfSxcbn07XG5cbmlmIChfX0RFVl9fKSB7XG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBBUlQuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIEFSVC4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnQVJUJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnQVJUIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2FydCcgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1hcnQvYXJ0JyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIExpc3RWaWV3LiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBMaXN0Vmlldy4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnTGlzdFZpZXcnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdMaXN0VmlldyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZmIubWUvbm9saXN0dmlldyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvciB1c2UgJyArXG4gICAgICAgICAgJ2BkZXByZWNhdGVkLXJlYWN0LW5hdGl2ZS1saXN0dmlld2AuJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFN3aXBlYWJsZUxpc3RWaWV3LiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBTd2lwZWFibGVMaXN0Vmlldy4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnU3dpcGVhYmxlTGlzdFZpZXcnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdTd2lwZWFibGVMaXN0VmlldyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZmIubWUvbm9saXN0dmlldyBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvciB1c2UgJyArXG4gICAgICAgICAgJ2BkZXByZWNhdGVkLXJlYWN0LW5hdGl2ZS1zd2lwZWFibGUtbGlzdHZpZXdgLicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBXZWJWaWV3LiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBXZWJWaWV3LiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdXZWJWaWV3Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnV2ViVmlldyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdyZWFjdC1uYXRpdmUtd2VidmlldycgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS13ZWJ2aWV3L3JlYWN0LW5hdGl2ZS13ZWJ2aWV3JyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIE5ldEluZm8uICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIE5ldEluZm8uICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ05ldEluZm8nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdOZXRJbmZvIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L25ldGluZm8nIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtbmV0aW5mby9yZWFjdC1uYXRpdmUtbmV0aW5mbycsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBDYW1lcmFSb2xsLiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBDYW1lcmFSb2xsLiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdDYW1lcmFSb2xsJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnQ2FtZXJhUm9sbCBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9jYW1lcmFyb2xsJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNhbWVyYXJvbGwvcmVhY3QtbmF0aXZlLWNhbWVyYXJvbGwnLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgSW1hZ2VTdG9yZS4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgSW1hZ2VTdG9yZS4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnSW1hZ2VTdG9yZScsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0ltYWdlU3RvcmUgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgJ1RvIGdldCBhIGJhc2U2NC1lbmNvZGVkIHN0cmluZyBmcm9tIGEgbG9jYWwgaW1hZ2UgdXNlIGVpdGhlciBvZiB0aGUgZm9sbG93aW5nIHRoaXJkLXBhcnR5IGxpYnJhcmllczonICtcbiAgICAgICAgICBcIiogZXhwby1maWxlLXN5c3RlbTogYHJlYWRBc1N0cmluZ0FzeW5jKGZpbGVwYXRoLCAnYmFzZTY0JylgXCIgK1xuICAgICAgICAgIFwiKiByZWFjdC1uYXRpdmUtZnM6IGByZWFkRmlsZShmaWxlcGF0aCwgJ2Jhc2U2NCcpYFwiLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgSW1hZ2VFZGl0b3IuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIEltYWdlRWRpdG9yLiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdJbWFnZUVkaXRvcicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0ltYWdlRWRpdG9yIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2ltYWdlLWVkaXRvcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NhbGxzdGFjay9yZWFjdC1uYXRpdmUtaW1hZ2UtZWRpdG9yJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLyogJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFRpbWVQaWNrZXJBbmRyb2lkLiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBUaW1lUGlja2VyQW5kcm9pZC4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnVGltZVBpY2tlckFuZHJvaWQnLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdUaW1lUGlja2VyQW5kcm9pZCBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9kYXRldGltZXBpY2tlcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1kYXRldGltZXBpY2tlci9kYXRldGltZXBpY2tlcicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBUb29sYmFyQW5kcm9pZC4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgVG9vbGJhckFuZHJvaWQuICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ1Rvb2xiYXJBbmRyb2lkJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnVG9vbGJhckFuZHJvaWQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvdG9vbGJhci1hbmRyb2lkJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLXRvb2xiYXItYW5kcm9pZC90b29sYmFyLWFuZHJvaWQnLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgVmlld1BhZ2VyQW5kcm9pZC4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgVmlld1BhZ2VyQW5kcm9pZC4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnVmlld1BhZ2VyQW5kcm9pZCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1ZpZXdQYWdlckFuZHJvaWQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAncmVhY3QtbmF0aXZlLXBhZ2VyLXZpZXcnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jYWxsc3RhY2svcmVhY3QtbmF0aXZlLXBhZ2VyLXZpZXcnLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgQ2hlY2tCb3guICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIENoZWNrQm94LiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdDaGVja0JveCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0NoZWNrQm94IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2NoZWNrYm94JyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNoZWNrYm94L3JlYWN0LW5hdGl2ZS1jaGVja2JveCcsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBTZWdtZW50ZWRDb250cm9sSU9TLiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBTZWdtZW50ZWRDb250cm9sSU9TLiAqL1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdTZWdtZW50ZWRDb250cm9sSU9TJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnU2VnbWVudGVkQ29udHJvbElPUyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9zZWdtZW50ZWQtY2hlY2tib3gnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1zZWdtZW50ZWQtY29udHJvbC9zZWdtZW50ZWQtY29udHJvbCcsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBTdGF0dXNCYXJJT1MuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFN0YXR1c0JhcklPUy4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnU3RhdHVzQmFySU9TJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnU3RhdHVzQmFySU9TIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgICdIYXMgYmVlbiBtZXJnZWQgd2l0aCBTdGF0dXNCYXIuICcgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9zdGF0dXNiYXInLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvKiAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ10gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgUGlja2VySU9TLiAqL1xuICAvKiAkRmxvd0ZpeE1lW2ludmFsaWQtZXhwb3J0XSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBQaWNrZXJJT1MuICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ1BpY2tlcklPUycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1BpY2tlcklPUyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLXBpY2tlci9waWNrZXInIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtcGlja2VyL3BpY2tlcicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBQaWNrZXIuICovXG4gIC8qICRGbG93Rml4TWVbaW52YWxpZC1leHBvcnRdIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuXG4gICAqIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFBpY2tlci4gKi9cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnUGlja2VyJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnUGlja2VyIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtcGlja2VyL3BpY2tlcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1waWNrZXIvcGlja2VyJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG4gIC8qICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlblxuICAgKiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBEYXRlUGlja2VyQW5kcm9pZC4gKi9cbiAgLyogJEZsb3dGaXhNZVtpbnZhbGlkLWV4cG9ydF0gVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW5cbiAgICogYXR0ZW1wdGluZyB0byBhY2Nlc3MgRGF0ZVBpY2tlckFuZHJvaWQuICovXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ0RhdGVQaWNrZXJBbmRyb2lkJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnRGF0ZVBpY2tlckFuZHJvaWQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvZGF0ZXRpbWVwaWNrZXInIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtZGF0ZXRpbWVwaWNrZXIvZGF0ZXRpbWVwaWNrZXInLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBVUEsWUFBWTtBQTRGWixJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDdEMsSUFBTUMsUUFBUSxHQUFHRCxPQUFPLGtDQUFrQztBQUUxREUsTUFBTSxDQUFDQyxPQUFPLEdBQUc7RUFFZixJQUFJQyxpQkFBaUJBLENBQUEsRUFBc0I7SUFDekMsT0FBT0osT0FBTyw4REFBOEQsQ0FDekVLLE9BQU87RUFDWixDQUFDO0VBQ0QsSUFBSUMsaUJBQWlCQSxDQUFBLEVBQXNCO0lBQ3pDLE9BQU9OLE9BQU8sOERBQThEO0VBQzlFLENBQUM7RUFDRCxJQUFJTyxNQUFNQSxDQUFBLEVBQVc7SUFDbkIsT0FBT1AsT0FBTyxpQ0FBaUM7RUFDakQsQ0FBQztFQUVELElBQUlRLGFBQWFBLENBQUEsRUFBa0I7SUFDakNQLFFBQVEsQ0FDTixzQkFBc0IsRUFDdEIsZ0dBQWdHLEdBQzlGLGdIQUFnSCxHQUNoSCxtRUFBbUUsQ0FDdEU7SUFDRCxPQUFPRCxPQUFPLG1EQUFtRDtFQUNuRSxDQUFDO0VBRUQsSUFBSVMsbUJBQW1CQSxDQUFBLEVBQXdCO0lBQzdDLE9BQU9ULE9BQU8sNERBQTREO0VBQzVFLENBQUM7RUFDRCxJQUFJVSxRQUFRQSxDQUFBLEVBQWE7SUFDdkIsT0FBT1YsT0FBTyw4QkFBOEI7RUFDOUMsQ0FBQztFQUNELElBQUlXLEtBQUtBLENBQUEsRUFBVTtJQUNqQixPQUFPWCxPQUFPLDJCQUEyQjtFQUMzQyxDQUFDO0VBQ0QsSUFBSVksZUFBZUEsQ0FBQSxFQUFvQjtJQUNyQyxPQUFPWixPQUFPLHFDQUFxQztFQUNyRCxDQUFDO0VBQ0QsSUFBSWEsa0JBQWtCQSxDQUFBLEVBQXVCO0lBQzNDLE9BQU9iLE9BQU8sdURBQXVEO0VBQ3ZFLENBQUM7RUFDRCxJQUFJYyxvQkFBb0JBLENBQUEsRUFBeUI7SUFDL0MsT0FB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