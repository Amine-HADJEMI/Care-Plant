45843b61bb8e27abece1d6c6a0dc4505
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.__INTERNAL_VIEW_CONFIG = void 0;
var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var __INTERNAL_VIEW_CONFIG = {
  uiViewClassName: 'RCTTextInlineImage',
  bubblingEventTypes: {},
  directEventTypes: {},
  validAttributes: {
    resizeMode: true,
    src: true,
    tintColor: {
      process: require("../StyleSheet/processColor")
    },
    headers: true
  }
};
exports.__INTERNAL_VIEW_CONFIG = __INTERNAL_VIEW_CONFIG;
var TextInlineImage = NativeComponentRegistry.get('RCTTextInlineImage', function () {
  return __INTERNAL_VIEW_CONFIG;
});
var _default = TextInlineImage;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfX0lOVEVSTkFMX1ZJRVdfQ09ORklHIiwiTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwidWlWaWV3Q2xhc3NOYW1lIiwiYnViYmxpbmdFdmVudFR5cGVzIiwiZGlyZWN0RXZlbnRUeXBlcyIsInZhbGlkQXR0cmlidXRlcyIsInJlc2l6ZU1vZGUiLCJzcmMiLCJ0aW50Q29sb3IiLCJwcm9jZXNzIiwiaGVhZGVycyIsIlRleHRJbmxpbmVJbWFnZSIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiVGV4dElubGluZUltYWdlTmF0aXZlQ29tcG9uZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtcbiAgSG9zdENvbXBvbmVudCxcbiAgUGFydGlhbFZpZXdDb25maWcsXG59IGZyb20gJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlVHlwZXMnO1xuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXdQcm9wVHlwZXMnO1xuaW1wb3J0IHR5cGUge0ltYWdlUmVzaXplTW9kZX0gZnJvbSAnLi9JbWFnZVJlc2l6ZU1vZGUnO1xuaW1wb3J0ICogYXMgTmF0aXZlQ29tcG9uZW50UmVnaXN0cnkgZnJvbSAnLi4vTmF0aXZlQ29tcG9uZW50L05hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5JztcbmltcG9ydCB0eXBlIHtDb2xvclZhbHVlfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuXG50eXBlIE5hdGl2ZVByb3BzID0gJFJlYWRPbmx5PHtcbiAgLi4uVmlld1Byb3BzLFxuICByZXNpemVNb2RlPzogP0ltYWdlUmVzaXplTW9kZSxcbiAgc3JjPzogPyRSZWFkT25seUFycmF5PD8kUmVhZE9ubHk8e3VyaTogc3RyaW5nLCAuLi59Pj4sXG4gIHRpbnRDb2xvcj86ID9Db2xvclZhbHVlLFxuICBoZWFkZXJzPzogP3tbc3RyaW5nXTogc3RyaW5nfSxcbn0+O1xuXG5leHBvcnQgY29uc3QgX19JTlRFUk5BTF9WSUVXX0NPTkZJRzogUGFydGlhbFZpZXdDb25maWcgPSB7XG4gIHVpVmlld0NsYXNzTmFtZTogJ1JDVFRleHRJbmxpbmVJbWFnZScsXG4gIGJ1YmJsaW5nRXZlbnRUeXBlczoge30sXG4gIGRpcmVjdEV2ZW50VHlwZXM6IHt9LFxuICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICByZXNpemVNb2RlOiB0cnVlLFxuICAgIHNyYzogdHJ1ZSxcbiAgICB0aW50Q29sb3I6IHtcbiAgICAgIHByb2Nlc3M6IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvcHJvY2Vzc0NvbG9yJyksXG4gICAgfSxcbiAgICBoZWFkZXJzOiB0cnVlLFxuICB9LFxufTtcblxuY29uc3QgVGV4dElubGluZUltYWdlOiBIb3N0Q29tcG9uZW50PE5hdGl2ZVByb3BzPiA9XG4gIE5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5LmdldDxOYXRpdmVQcm9wcz4oXG4gICAgJ1JDVFRleHRJbmxpbmVJbWFnZScsXG4gICAgKCkgPT4gX19JTlRFUk5BTF9WSUVXX0NPTkZJRyxcbiAgKTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dElubGluZUltYWdlO1xuIl0sIm1hcHBpbmdzIjoiQUFVQSxZQUFZOztBQUFDQSxNQUFBLENBQUFDLGNBQUEsQ0FBQUMsT0FBQTtFQUFBQyxLQUFBO0FBQUE7QUFBQUQsT0FBQSxDQUFBRSxPQUFBLEdBQUFGLE9BQUEsQ0FBQUcsc0JBQUE7QUFRYixJQUFBQyx1QkFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBQXNGLFNBQUFDLHlCQUFBQyxXQUFBLGVBQUFDLE9BQUEsa0NBQUFDLGlCQUFBLE9BQUFELE9BQUEsUUFBQUUsZ0JBQUEsT0FBQUYsT0FBQSxZQUFBRix3QkFBQSxZQUFBQSx5QkFBQUMsV0FBQSxXQUFBQSxXQUFBLEdBQUFHLGdCQUFBLEdBQUFELGlCQUFBLEtBQUFGLFdBQUE7QUFBQSxTQUFBSCx3QkFBQU8sR0FBQSxFQUFBSixXQUFBLFNBQUFBLFdBQUEsSUFBQUksR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsV0FBQUQsR0FBQSxRQUFBQSxHQUFBLG9CQUFBQSxHQUFBLHdCQUFBQSxHQUFBLDRCQUFBVixPQUFBLEVBQUFVLEdBQUEsVUFBQUUsS0FBQSxHQUFBUCx3QkFBQSxDQUFBQyxXQUFBLE9BQUFNLEtBQUEsSUFBQUEsS0FBQSxDQUFBQyxHQUFBLENBQUFILEdBQUEsWUFBQUUsS0FBQSxDQUFBRSxHQUFBLENBQUFKLEdBQUEsU0FBQUssTUFBQSxXQUFBQyxxQkFBQSxHQUFBcEIsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQXFCLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVIsR0FBQSxRQUFBUSxHQUFBLGtCQUFBdEIsTUFBQSxDQUFBdUIsU0FBQSxDQUFBQyxjQUFBLENBQUFDLElBQUEsQ0FBQVgsR0FBQSxFQUFBUSxHQUFBLFNBQUFJLElBQUEsR0FBQU4scUJBQUEsR0FBQXBCLE1BQUEsQ0FBQXFCLHdCQUFBLENBQUFQLEdBQUEsRUFBQVEsR0FBQSxjQUFBSSxJQUFBLEtBQUFBLElBQUEsQ0FBQVIsR0FBQSxJQUFBUSxJQUFBLENBQUFDLEdBQUEsS0FBQTNCLE1BQUEsQ0FBQUMsY0FBQSxDQUFBa0IsTUFBQSxFQUFBRyxHQUFBLEVBQUFJLElBQUEsWUFBQVAsTUFBQSxDQUFBRyxHQUFBLElBQUFSLEdBQUEsQ0FBQVEsR0FBQSxTQUFBSCxNQUFBLENBQUFmLE9BQUEsR0FBQVUsR0FBQSxNQUFBRSxLQUFBLElBQUFBLEtBQUEsQ0FBQVcsR0FBQSxDQUFBYixHQUFBLEVBQUFLLE1BQUEsWUFBQUEsTUFBQTtBQVcvRSxJQUFNZCxzQkFBeUMsR0FBRztFQUN2RHVCLGVBQWUsRUFBRSxvQkFBb0I7RUFDckNDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztFQUN0QkMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0VBQ3BCQyxlQUFlLEVBQUU7SUFDZkMsVUFBVSxFQUFFLElBQUk7SUFDaEJDLEdBQUcsRUFBRSxJQUFJO0lBQ1RDLFNBQVMsRUFBRTtNQUNUQyxPQUFPLEVBQUUzQixPQUFPO0lBQ2xCLENBQUM7SUFDRDRCLE9BQU8sRUFBRTtFQUNYO0FBQ0YsQ0FBQztBQUFDbEMsT0FBQSxDQUFBRyxzQkFBQSxHQUFBQSxzQkFBQTtBQUVGLElBQU1nQyxlQUEyQyxHQUMvQy9CLHVCQUF1QixDQUFDWSxHQUFHLENBQ3pCLG9CQUFvQixFQUNwQjtFQUFBLE9BQU1iLHNCQUFzQjtBQUFBLEVBQzdCO0FBQUMsSUFBQWlDLFFBQUEsR0FFV0QsZUFBZTtBQUFBbkMsT0FBQSxDQUFBRSxPQUFBLEdBQUFrQyxRQUFBIn0=