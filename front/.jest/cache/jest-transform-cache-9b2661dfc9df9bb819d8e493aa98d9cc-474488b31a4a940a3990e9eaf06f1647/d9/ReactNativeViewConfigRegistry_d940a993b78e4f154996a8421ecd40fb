2c53673ac95a9acec22859a8b47e89ba
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _invariant = _interopRequireDefault(require("invariant"));
var customBubblingEventTypes = {};
var customDirectEventTypes = {};
exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();
function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
    directEventTypes = viewConfig.directEventTypes;
  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        (0, _invariant.default)(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }
  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }
  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}
exports.register = function (name, callback) {
  (0, _invariant.default)(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  (0, _invariant.default)(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);
  viewConfigCallbacks.set(name, callback);
  return name;
};
exports.get = function (name) {
  var viewConfig;
  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);
    if (typeof callback !== 'function') {
      (0, _invariant.default)(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
    }
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
    viewConfigCallbacks.set(name, null);
  } else {
    viewConfig = viewConfigs.get(name);
  }
  (0, _invariant.default)(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pbnZhcmlhbnQiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXhwb3J0cyIsInZpZXdDb25maWdDYWxsYmFja3MiLCJNYXAiLCJ2aWV3Q29uZmlncyIsInByb2Nlc3NFdmVudFR5cGVzIiwidmlld0NvbmZpZyIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJfX0RFVl9fIiwidG9wTGV2ZWxUeXBlIiwiaW52YXJpYW50IiwicmVnaXN0ZXIiLCJuYW1lIiwiY2FsbGJhY2siLCJoYXMiLCJzZXQiLCJnZXQiLCJ0ZXN0Il0sInNvdXJjZXMiOlsiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbm9mb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGdlbmVyYXRlZCBTaWduZWRTb3VyY2U8PGE1YjQwZWJmMWY1YjE3ZDZkYzgzNDc5YzFjNTk3NTY2Pj5cbiAqXG4gKiBUaGlzIGZpbGUgd2FzIHN5bmMnZCBmcm9tIHRoZSBmYWNlYm9vay9yZWFjdCByZXBvc2l0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHt0eXBlIFZpZXdDb25maWd9IGZyb20gJy4vUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8vIEV2ZW50IGNvbmZpZ3NcbmNvbnN0IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlczoge1xuICBbZXZlbnROYW1lOiBzdHJpbmddOiAkUmVhZE9ubHk8e3xcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczogJFJlYWRPbmx5PHt8XG4gICAgICBjYXB0dXJlZDogc3RyaW5nLFxuICAgICAgYnViYmxlZDogc3RyaW5nLFxuICAgICAgc2tpcEJ1YmJsaW5nPzogP2Jvb2xlYW4sXG4gICAgfH0+LFxuICB8fT4sXG4gIC4uLixcbn0gPSB7fTtcbmNvbnN0IGN1c3RvbURpcmVjdEV2ZW50VHlwZXM6IHtcbiAgW2V2ZW50TmFtZTogc3RyaW5nXTogJFJlYWRPbmx5PHt8XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogc3RyaW5nLFxuICB8fT4sXG4gIC4uLixcbn0gPSB7fTtcblxuZXhwb3J0cy5jdXN0b21CdWJibGluZ0V2ZW50VHlwZXMgPSBjdXN0b21CdWJibGluZ0V2ZW50VHlwZXM7XG5leHBvcnRzLmN1c3RvbURpcmVjdEV2ZW50VHlwZXMgPSBjdXN0b21EaXJlY3RFdmVudFR5cGVzO1xuXG5jb25zdCB2aWV3Q29uZmlnQ2FsbGJhY2tzID0gbmV3IE1hcCgpO1xuY29uc3Qgdmlld0NvbmZpZ3MgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIHByb2Nlc3NFdmVudFR5cGVzKHZpZXdDb25maWc6IFZpZXdDb25maWcpOiB2b2lkIHtcbiAgY29uc3Qge2J1YmJsaW5nRXZlbnRUeXBlcywgZGlyZWN0RXZlbnRUeXBlc30gPSB2aWV3Q29uZmlnO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaWYgKGJ1YmJsaW5nRXZlbnRUeXBlcyAhPSBudWxsICYmIGRpcmVjdEV2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCB0b3BMZXZlbFR5cGUgaW4gZGlyZWN0RXZlbnRUeXBlcykge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgYnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPT0gbnVsbCxcbiAgICAgICAgICAnRXZlbnQgY2Fubm90IGJlIGJvdGggZGlyZWN0IGFuZCBidWJibGluZzogJXMnLFxuICAgICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYnViYmxpbmdFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBidWJibGluZ0V2ZW50VHlwZXMpIHtcbiAgICAgIGlmIChjdXN0b21CdWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsKSB7XG4gICAgICAgIGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID1cbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyZWN0RXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgZm9yIChjb25zdCB0b3BMZXZlbFR5cGUgaW4gZGlyZWN0RXZlbnRUeXBlcykge1xuICAgICAgaWYgKGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsKSB7XG4gICAgICAgIGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9IGRpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBuYXRpdmUgdmlldy9jb21wb25lbnQgYnkgbmFtZS5cbiAqIEEgY2FsbGJhY2sgaXMgcHJvdmlkZWQgdG8gbG9hZCB0aGUgdmlldyBjb25maWcgZnJvbSBVSU1hbmFnZXIuXG4gKiBUaGUgY2FsbGJhY2sgaXMgZGVmZXJyZWQgdW50aWwgdGhlIHZpZXcgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmV4cG9ydHMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiBWaWV3Q29uZmlnKTogc3RyaW5nIHtcbiAgaW52YXJpYW50KFxuICAgICF2aWV3Q29uZmlnQ2FsbGJhY2tzLmhhcyhuYW1lKSxcbiAgICAnVHJpZWQgdG8gcmVnaXN0ZXIgdHdvIHZpZXdzIHdpdGggdGhlIHNhbWUgbmFtZSAlcycsXG4gICAgbmFtZSxcbiAgKTtcbiAgaW52YXJpYW50KFxuICAgIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyxcbiAgICAnVmlldyBjb25maWcgZ2V0dGVyIGNhbGxiYWNrIGZvciBjb21wb25lbnQgYCVzYCBtdXN0IGJlIGEgZnVuY3Rpb24gKHJlY2VpdmVkIGAlc2ApJyxcbiAgICBuYW1lLFxuICAgIGNhbGxiYWNrID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGNhbGxiYWNrLFxuICApO1xuICB2aWV3Q29uZmlnQ2FsbGJhY2tzLnNldChuYW1lLCBjYWxsYmFjayk7XG4gIHJldHVybiBuYW1lO1xufTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBjb25maWcgZm9yIHRoZSBzcGVjaWZpZWQgdmlldy5cbiAqIElmIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHZpZXcgaGFzIGJlZW4gdXNlZCxcbiAqIFRoaXMgY29uZmlndXJhdGlvbiB3aWxsIGJlIGxhenktbG9hZGVkIGZyb20gVUlNYW5hZ2VyLlxuICovXG5leHBvcnRzLmdldCA9IGZ1bmN0aW9uKG5hbWU6IHN0cmluZyk6IFZpZXdDb25maWcge1xuICBsZXQgdmlld0NvbmZpZztcbiAgaWYgKCF2aWV3Q29uZmlncy5oYXMobmFtZSkpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IHZpZXdDb25maWdDYWxsYmFja3MuZ2V0KG5hbWUpO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdWaWV3IGNvbmZpZyBnZXR0ZXIgY2FsbGJhY2sgZm9yIGNvbXBvbmVudCBgJXNgIG11c3QgYmUgYSBmdW5jdGlvbiAocmVjZWl2ZWQgYCVzYCkuJXMnLFxuICAgICAgICBuYW1lLFxuICAgICAgICBjYWxsYmFjayA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBjYWxsYmFjayxcbiAgICAgICAgdHlwZW9mIG5hbWVbMF0gPT09ICdzdHJpbmcnICYmIC9bYS16XS8udGVzdChuYW1lWzBdKVxuICAgICAgICAgID8gJyBNYWtlIHN1cmUgdG8gc3RhcnQgY29tcG9uZW50IG5hbWVzIHdpdGggYSBjYXBpdGFsIGxldHRlci4nXG4gICAgICAgICAgOiAnJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHZpZXdDb25maWcgPSBjYWxsYmFjaygpO1xuICAgIHByb2Nlc3NFdmVudFR5cGVzKHZpZXdDb25maWcpO1xuICAgIHZpZXdDb25maWdzLnNldChuYW1lLCB2aWV3Q29uZmlnKTtcblxuICAgIC8vIENsZWFyIHRoZSBjYWxsYmFjayBhZnRlciB0aGUgY29uZmlnIGlzIHNldCBzbyB0aGF0XG4gICAgLy8gd2UgZG9uJ3QgbWFzayBhbnkgZXJyb3JzIGR1cmluZyByZWdpc3RyYXRpb24uXG4gICAgdmlld0NvbmZpZ0NhbGxiYWNrcy5zZXQobmFtZSwgbnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgdmlld0NvbmZpZyA9IHZpZXdDb25maWdzLmdldChuYW1lKTtcbiAgfVxuICBpbnZhcmlhbnQodmlld0NvbmZpZywgJ1ZpZXcgY29uZmlnIG5vdCBmb3VuZCBmb3IgbmFtZSAlcycsIG5hbWUpO1xuICByZXR1cm4gdmlld0NvbmZpZztcbn07XG4iXSwibWFwcGluZ3MiOiJBQWFBLFlBQVk7O0FBQUMsSUFBQUEsc0JBQUEsR0FBQUMsT0FBQTtBQUdiLElBQUFDLFVBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUdBLElBQU1FLHdCQVNMLEdBQUcsQ0FBQyxDQUFDO0FBQ04sSUFBTUMsc0JBS0wsR0FBRyxDQUFDLENBQUM7QUFFTkMsT0FBTyxDQUFDRix3QkFBd0IsR0FBR0Esd0JBQXdCO0FBQzNERSxPQUFPLENBQUNELHNCQUFzQixHQUFHQSxzQkFBc0I7QUFFdkQsSUFB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