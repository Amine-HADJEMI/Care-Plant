a1a39d2070946551f0a9a7972249a41a
'use strict';

var AssetRegistry = require('@react-native/assets/registry');
var AssetSourceResolver = require("./AssetSourceResolver");
var _require = require("./AssetUtils"),
  pickScale = _require.pickScale;
var _customSourceTransformer, _serverURL, _scriptURL;
var _sourceCodeScriptURL;
function getSourceCodeScriptURL() {
  if (_sourceCodeScriptURL) {
    return _sourceCodeScriptURL;
  }
  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;
  if (!sourceCode) {
    sourceCode = require("../NativeModules/specs/NativeSourceCode").default;
  }
  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
  return _sourceCodeScriptURL;
}
function getDevServerURL() {
  if (_serverURL === undefined) {
    var sourceCodeScriptURL = getSourceCodeScriptURL();
    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }
  return _serverURL;
}
function _coerceLocalScriptURL(scriptURL) {
  if (scriptURL) {
    if (scriptURL.startsWith('assets://')) {
      return null;
    }
    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
    if (!scriptURL.includes('://')) {
      scriptURL = 'file://' + scriptURL;
    }
  }
  return scriptURL;
}
function getScriptURL() {
  if (_scriptURL === undefined) {
    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
  }
  return _scriptURL;
}
function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}
function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }
  var asset = AssetRegistry.getAssetByID(source);
  if (!asset) {
    return null;
  }
  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }
  return resolver.defaultAsset();
}
module.exports = resolveAssetSource;
module.exports.pickScale = pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBc3NldFJlZ2lzdHJ5IiwicmVxdWlyZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJfcmVxdWlyZSIsInBpY2tTY2FsZSIsIl9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciIsIl9zZXJ2ZXJVUkwiLCJfc2NyaXB0VVJMIiwiX3NvdXJjZUNvZGVTY3JpcHRVUkwiLCJnZXRTb3VyY2VDb2RlU2NyaXB0VVJMIiwic291cmNlQ29kZSIsImdsb2JhbCIsIm5hdGl2ZUV4dGVuc2lvbnMiLCJTb3VyY2VDb2RlIiwiZGVmYXVsdCIsImdldENvbnN0YW50cyIsInNjcmlwdFVSTCIsImdldERldlNlcnZlclVSTCIsInVuZGVmaW5lZCIsInNvdXJjZUNvZGVTY3JpcHRVUkwiLCJtYXRjaCIsIl9jb2VyY2VMb2NhbFNjcmlwdFVSTCIsInN0YXJ0c1dpdGgiLCJzdWJzdHJpbmciLCJsYXN0SW5kZXhPZiIsImluY2x1ZGVzIiwiZ2V0U2NyaXB0VVJMIiwic2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJ0cmFuc2Zvcm1lciIsInJlc29sdmVBc3NldFNvdXJjZSIsInNvdXJjZSIsImFzc2V0IiwiZ2V0QXNzZXRCeUlEIiwicmVzb2x2ZXIiLCJkZWZhdWx0QXNzZXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsicmVzb2x2ZUFzc2V0U291cmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBNZXRhIFBsYXRmb3JtcywgSW5jLiBhbmQgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbi8vIFJlc29sdmVzIGFuIGFzc2V0IGludG8gYSBgc291cmNlYCBmb3IgYEltYWdlYC5cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBc3NldFJlZ2lzdHJ5ID0gcmVxdWlyZSgnQHJlYWN0LW5hdGl2ZS9hc3NldHMvcmVnaXN0cnknKTtcbmNvbnN0IEFzc2V0U291cmNlUmVzb2x2ZXIgPSByZXF1aXJlKCcuL0Fzc2V0U291cmNlUmVzb2x2ZXInKTtcbmNvbnN0IHtwaWNrU2NhbGV9ID0gcmVxdWlyZSgnLi9Bc3NldFV0aWxzJyk7XG5cbmltcG9ydCB0eXBlIHtSZXNvbHZlZEFzc2V0U291cmNlfSBmcm9tICcuL0Fzc2V0U291cmNlUmVzb2x2ZXInO1xuXG5sZXQgX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyLCBfc2VydmVyVVJMLCBfc2NyaXB0VVJMO1xuXG5sZXQgX3NvdXJjZUNvZGVTY3JpcHRVUkw6ID9zdHJpbmc7XG5mdW5jdGlvbiBnZXRTb3VyY2VDb2RlU2NyaXB0VVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NvdXJjZUNvZGVTY3JpcHRVUkwpIHtcbiAgICByZXR1cm4gX3NvdXJjZUNvZGVTY3JpcHRVUkw7XG4gIH1cblxuICBsZXQgc291cmNlQ29kZSA9XG4gICAgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMgJiYgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMuU291cmNlQ29kZTtcbiAgaWYgKCFzb3VyY2VDb2RlKSB7XG4gICAgc291cmNlQ29kZSA9IHJlcXVpcmUoJy4uL05hdGl2ZU1vZHVsZXMvc3BlY3MvTmF0aXZlU291cmNlQ29kZScpLmRlZmF1bHQ7XG4gIH1cbiAgX3NvdXJjZUNvZGVTY3JpcHRVUkwgPSBzb3VyY2VDb2RlLmdldENvbnN0YW50cygpLnNjcmlwdFVSTDtcbiAgcmV0dXJuIF9zb3VyY2VDb2RlU2NyaXB0VVJMO1xufVxuXG5mdW5jdGlvbiBnZXREZXZTZXJ2ZXJVUkwoKTogP3N0cmluZyB7XG4gIGlmIChfc2VydmVyVVJMID09PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBzb3VyY2VDb2RlU2NyaXB0VVJMID0gZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpO1xuICAgIGNvbnN0IG1hdGNoID1cbiAgICAgIHNvdXJjZUNvZGVTY3JpcHRVUkwgJiYgc291cmNlQ29kZVNjcmlwdFVSTC5tYXRjaCgvXmh0dHBzPzpcXC9cXC8uKj9cXC8vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIC8vIGpzQnVuZGxlIHdhcyBsb2FkZWQgZnJvbSBuZXR3b3JrXG4gICAgICBfc2VydmVyVVJMID0gbWF0Y2hbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGpzQnVuZGxlIHdhcyBsb2FkZWQgZnJvbSBmaWxlXG4gICAgICBfc2VydmVyVVJMID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9zZXJ2ZXJVUkw7XG59XG5cbmZ1bmN0aW9uIF9jb2VyY2VMb2NhbFNjcmlwdFVSTChzY3JpcHRVUkw6ID9zdHJpbmcpOiA/c3RyaW5nIHtcbiAgaWYgKHNjcmlwdFVSTCkge1xuICAgIGlmIChzY3JpcHRVUkwuc3RhcnRzV2l0aCgnYXNzZXRzOi8vJykpIHtcbiAgICAgIC8vIGFuZHJvaWQ6IHJ1bm5pbmcgZnJvbSB3aXRoaW4gYXNzZXRzLCBubyBvZmZsaW5lIHBhdGggdG8gdXNlXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc2NyaXB0VVJMID0gc2NyaXB0VVJMLnN1YnN0cmluZygwLCBzY3JpcHRVUkwubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgIGlmICghc2NyaXB0VVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xuICAgICAgLy8gQWRkIGZpbGUgcHJvdG9jb2wgaW4gY2FzZSB3ZSBoYXZlIGFuIGFic29sdXRlIGZpbGUgcGF0aCBhbmQgbm90IGEgVVJMLlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgcmVhbGx5IGJlIG5lY2Vzc2FyeS4gc2NyaXB0VVJMIHNob3VsZCBiZSBhIFVSTC5cbiAgICAgIHNjcmlwdFVSTCA9ICdmaWxlOi8vJyArIHNjcmlwdFVSTDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gZ2V0U2NyaXB0VVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NjcmlwdFVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgX3NjcmlwdFVSTCA9IF9jb2VyY2VMb2NhbFNjcmlwdFVSTChnZXRTb3VyY2VDb2RlU2NyaXB0VVJMKCkpO1xuICB9XG4gIHJldHVybiBfc2NyaXB0VVJMO1xufVxuXG5mdW5jdGlvbiBzZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcihcbiAgdHJhbnNmb3JtZXI6IChyZXNvbHZlcjogQXNzZXRTb3VyY2VSZXNvbHZlcikgPT4gUmVzb2x2ZWRBc3NldFNvdXJjZSxcbik6IHZvaWQge1xuICBfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIgPSB0cmFuc2Zvcm1lcjtcbn1cblxuLyoqXG4gKiBgc291cmNlYCBpcyBlaXRoZXIgYSBudW1iZXIgKG9wYXF1ZSB0eXBlIHJldHVybmVkIGJ5IHJlcXVpcmUoJy4vZm9vLnBuZycpKVxuICogb3IgYW4gYEltYWdlU291cmNlYCBsaWtlIHsgdXJpOiAnPGh0dHAgbG9jYXRpb24gfHwgZmlsZSBwYXRoPicgfVxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXRTb3VyY2Uoc291cmNlOiBhbnkpOiA/UmVzb2x2ZWRBc3NldFNvdXJjZSB7XG4gIGlmICh0eXBlb2Ygc291cmNlID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBjb25zdCBhc3NldCA9IEFzc2V0UmVnaXN0cnkuZ2V0QXNzZXRCeUlEKHNvdXJjZSk7XG4gIGlmICghYXNzZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IHJlc29sdmVyID0gbmV3IEFzc2V0U291cmNlUmVzb2x2ZXIoXG4gICAgZ2V0RGV2U2VydmVyVVJMKCksXG4gICAgZ2V0U2NyaXB0VVJMKCksXG4gICAgYXNzZXQsXG4gICk7XG4gIGlmIChfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIpIHtcbiAgICByZXR1cm4gX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKHJlc29sdmVyKTtcbiAgfVxuICByZXR1cm4gcmVzb2x2ZXIuZGVmYXVsdEFzc2V0KCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzb2x2ZUFzc2V0U291cmNlO1xubW9kdWxlLmV4cG9ydHMucGlja1NjYWxlID0gcGlja1NjYWxlO1xubW9kdWxlLmV4cG9ydHMuc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIgPSBzZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcjtcbiJdLCJtYXBwaW5ncyI6IkFBWUEsWUFBWTs7QUFFWixJQUFNQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQywrQkFBK0IsQ0FBQztBQUM5RCxJQUFNQyxtQkFBbUIsR0FBR0QsT0FBTyx5QkFBeUI7QUFDNUQsSUFBQUUsUUFBQSxHQUFvQkYsT0FBTyxnQkFBZ0I7RUFBcENHLFNBQVMsR0FBQUQsUUFBQSxDQUFUQyxTQUFTO0FBSWhCLElBQUlDLHdCQUF3QixFQUFFQyxVQUFVLEVBQUVDLFVBQVU7QUFFcEQsSUFBSUMsb0JBQTZCO0FBQ2pDLFNBQVNDLHNCQUFzQkEsQ0FBQSxFQUFZO0VBQ3pDLElBQUlELG9CQUFvQixFQUFFO0lBQ3hCLE9BQU9BLG9CQUFvQjtFQUM3QjtFQUVBLElBQUlFLFVBQVUsR0FDWkMsTUFBTSxDQUFDQyxnQkFBZ0IsSUFBSUQsTUFBTSxDQUFDQyxnQkFBZ0IsQ0FBQ0MsVUFBVTtFQUMvRCxJQUFJLENBQUNILFVBQVUsRUFBRTtJQUNmQSxVQUFVLEdBQUdULE9BQU8sMkNBQTJDLENBQUNhLE9BQU87RUFDekU7RUFDQU4sb0JBQW9CLEdBQUdFLFVBQVUsQ0FBQ0ssWUFBWSxFQUFFLENBQUNDLFNBQVM7RUFDMUQsT0FBT1Isb0JBQW9CO0FBQzdCO0FBRUEsU0FBU1MsZUFBZUEsQ0FBQSxFQUFZO0VBQ2xDLElBQUlYLFVBQVUsS0FBS1ksU0FBUyxFQUFFO0lBQzVCLElBQU1DLG1CQUFtQixHQUFHVixzQkFBc0IsRUFBRTtJQUNwRCxJQUFNVyxLQUFLLEdBQ1RELG1CQUFtQixJQUFJQSxtQkFBbUIsQ0FBQ0MsS0FBSyxDQUFDLG1CQUFtQixDQUFDO0lBQ3ZFLElBQUlBLEtBQUssRUFBRTtNQUVUZCxVQUFVLEdBQUdjLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxNQUFNO01BRUxkLFVBQVUsR0FBRyxJQUFJO0lBQ25CO0VBQ0Y7RUFDQSxPQUFPQSxVQUFVO0FBQ25CO0FBRUEsU0FBU2UscUJBQXFCQSxDQUFDTCxTQUFrQixFQUFXO0VBQzFELElBQUlBLFNBQVMsRUFBRTtJQUNiLElBQUlBLFNBQVMsQ0FBQ00sVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO01BRXJDLE9BQU8sSUFBSTtJQUNiO0lBQ0FOLFNBQVMsR0FBR0EsU0FBUyxDQUFDTyxTQUFTLENBQUMsQ0FBQyxFQUFFUCxTQUFTLENBQUNRLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEUsSUFBSSxDQUFDUixTQUFTLENBQUNTLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtNQUc5QlQsU0FBUyxHQUFHLFNBQVMsR0FBR0EsU0FBUztJQUNuQztFQUNGO0VBQ0EsT0FBT0EsU0FBUztBQUNsQjtBQUVBLFNBQVNVLFlBQVlBLENBQUEsRUFBWTtFQUMvQixJQUFJbkIsVUFBVSxLQUFLVyxTQUFTLEVBQUU7SUFDNUJYLFVBQVUsR0FBR2MscUJBQXFCLENBQUNaLHNCQUFzQixFQUFFLENBQUM7RUFDOUQ7RUFDQSxPQUFPRixVQUFVO0FBQ25CO0FBRUEsU0FBU29CLDBCQUEwQkEsQ0FDakNDLFdBQW1FLEVBQzdEO0VBQ052Qix3QkFBd0IsR0FBR3VCLFdBQVc7QUFDeEM7QUFNQSxTQUFTQyxrQkFBa0JBLENBQUNDLE1BQVcsRUFBd0I7RUFDN0QsSUFBSSxPQUFPQSxNQUFNLEtBQUssUUFBUSxFQUFFO0lBQzlCLE9BQU9BLE1BQU07RUFDZjtFQUVBLElBQU1DLEtBQUssR0FBRy9CLGFBQWEsQ0FBQ2dDLFlBQVksQ0FBQ0YsTUFBTSxDQUFDO0VBQ2hELElBQUksQ0FBQ0MsS0FBSyxFQUFFO0lBQ1YsT0FBTyxJQUFJO0VBQ2I7RUFFQSxJQUFNRSxRQUFRLEdBQUcsSUFBSS9CLG1CQUFtQixDQUN0Q2UsZUFBZSxFQUFFLEVBQ2pCUyxZQUFZLEVBQUUsRUFDZEssS0FBSyxDQUNOO0VBQ0QsSUFBSTFCLHdCQUF3QixFQUFFO0lBQzVCLE9BQU9BLHdCQUF3QixDQUFDNEIsUUFBUSxDQUFDO0VBQzNDO0VBQ0EsT0FBT0EsUUFBUSxDQUFDQyxZQUFZLEVBQUU7QUFDaEM7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdQLGtCQUFrQjtBQUNuQ00sTUFBTSxDQUFDQyxPQUFPLENBQUNoQyxTQUFTLEdBQUdBLFNBQVM7QUFDcEMrQixNQUFNLENBQUNDLE9BQU8sQ0FBQ1QsMEJBQTBCLEdBQUdBLDBCQUEwQiJ9