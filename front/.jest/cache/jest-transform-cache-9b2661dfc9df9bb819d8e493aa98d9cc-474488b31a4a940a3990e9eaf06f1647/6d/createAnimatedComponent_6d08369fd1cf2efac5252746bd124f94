0ccac0de05f656c2d718cd62c676907d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var createAnimatedComponentInjection = _interopRequireWildcard(require("./createAnimatedComponentInjection"));
var _jsxRuntime = require("react/jsx-runtime");
var _createAnimatedCompon;
var _excluded = ["style"],
  _excluded2 = ["style"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var View = require("../Components/View/View");
var _require = require("./AnimatedEvent"),
  AnimatedEvent = _require.AnimatedEvent;
var AnimatedProps = require("./nodes/AnimatedProps");
var React = require('react');
var NativeAnimatedHelper = require("./NativeAnimatedHelper");
var invariant = require('invariant');
var setAndForwardRef = require("../Utilities/setAndForwardRef");
var animatedComponentNextId = 1;
function createAnimatedComponent(Component) {
  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');
  var AnimatedComponent = function (_React$Component) {
    (0, _inherits2.default)(AnimatedComponent, _React$Component);
    var _super = _createSuper(AnimatedComponent);
    function AnimatedComponent() {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedComponent);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _super.call.apply(_super, [this].concat(args));
      _this._invokeAnimatedPropsCallbackOnMount = false;
      _this._eventDetachers = [];
      _this._animatedComponentId = animatedComponentNextId++ + ":animatedComponent";
      _this._isFabric = function () {
        var _this$_component$_int, _this$_component$_int2, _this$_component$getN, _this$_component$getN2, _this$_component$getS, _this$_component$getS2;
        if (_this._component == null) {
          return false;
        }
        return ((_this$_component$_int = _this._component['_internalInstanceHandle']) == null ? void 0 : (_this$_component$_int2 = _this$_component$_int.stateNode) == null ? void 0 : _this$_component$_int2.canonical) != null || _this._component.getNativeScrollRef != null && _this._component.getNativeScrollRef() != null && ((_this$_component$getN = _this._component.getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getN2 = _this$_component$getN.stateNode) == null ? void 0 : _this$_component$getN2.canonical) != null || _this._component.getScrollResponder != null && _this._component.getScrollResponder() != null && _this._component.getScrollResponder().getNativeScrollRef != null && _this._component.getScrollResponder().getNativeScrollRef() != null && ((_this$_component$getS = _this._component.getScrollResponder().getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getS2 = _this$_component$getS.stateNode) == null ? void 0 : _this$_component$getS2.canonical) != null;
      };
      _this._waitForUpdate = function () {
        if (_this._isFabric()) {
          NativeAnimatedHelper.API.setWaitingForIdentifier(_this._animatedComponentId);
        }
      };
      _this._markUpdateComplete = function () {
        if (_this._isFabric()) {
          NativeAnimatedHelper.API.unsetWaitingForIdentifier(_this._animatedComponentId);
        }
      };
      _this._animatedPropsCallback = function () {
        if (_this._component == null) {
          _this._invokeAnimatedPropsCallbackOnMount = true;
        } else if (process.env.NODE_ENV === 'test' || typeof _this._component.setNativeProps !== 'function' || _this._isFabric()) {
          _this.forceUpdate();
        } else if (!_this._propsAnimated.__isNative) {
          _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
        } else {
          throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
        }
      };
      _this._setComponentRef = setAndForwardRef({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          _this._prevComponent = _this._component;
          _this._component = ref;
        }
      });
      return _this;
    }
    (0, _createClass2.default)(AnimatedComponent, [{
      key: "_attachNativeEvents",
      value: function _attachNativeEvents() {
        var _this$_component,
          _this2 = this;
        var scrollableNode = (_this$_component = this._component) != null && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;
        var _loop = function _loop(key) {
          var prop = _this2.props[key];
          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__attach(scrollableNode, key);
            _this2._eventDetachers.push(function () {
              return prop.__detach(scrollableNode, key);
            });
          }
        };
        for (var key in this.props) {
          _loop(key);
        }
      }
    }, {
      key: "_detachNativeEvents",
      value: function _detachNativeEvents() {
        this._eventDetachers.forEach(function (remove) {
          return remove();
        });
        this._eventDetachers = [];
      }
    }, {
      key: "_attachProps",
      value: function _attachProps(nextProps) {
        var oldPropsAnimated = this._propsAnimated;
        this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);
        this._propsAnimated.__attach();
        if (oldPropsAnimated) {
          oldPropsAnimated.__restoreDefaultValues();
          oldPropsAnimated.__detach();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var initialPropsIfFabric = this._isFabric() ? this._initialAnimatedProps : null;
        var animatedProps = this._propsAnimated.__getValue(initialPropsIfFabric) || {};
        if (!this._initialAnimatedProps) {
          this._initialAnimatedProps = animatedProps;
        }
        var _animatedProps$style = animatedProps.style,
          style = _animatedProps$style === void 0 ? {} : _animatedProps$style,
          props = (0, _objectWithoutProperties2.default)(animatedProps, _excluded);
        var _ref = this.props.passthroughAnimatedPropExplicitValues || {},
          _ref$style = _ref.style,
          passthruStyle = _ref$style === void 0 ? {} : _ref$style,
          passthruProps = (0, _objectWithoutProperties2.default)(_ref, _excluded2);
        var mergedStyle = _objectSpread(_objectSpread({}, style), passthruStyle);
        return (0, _jsxRuntime.jsx)(Component, _objectSpread(_objectSpread(_objectSpread({}, props), passthruProps), {}, {
          collapsable: false,
          style: mergedStyle,
          ref: this._setComponentRef
        }));
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._waitForUpdate();
        this._attachProps(this.props);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._invokeAnimatedPropsCallbackOnMount) {
          this._invokeAnimatedPropsCallbackOnMount = false;
          this._animatedPropsCallback();
        }
        this._propsAnimated.setNativeView(this._component);
        this._attachNativeEvents();
        this._markUpdateComplete();
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this._waitForUpdate();
        this._attachProps(newProps);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this._component !== this._prevComponent) {
          this._propsAnimated.setNativeView(this._component);
        }
        if (this._component !== this._prevComponent || prevProps !== this.props) {
          this._detachNativeEvents();
          this._attachNativeEvents();
        }
        this._markUpdateComplete();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();
        this._detachNativeEvents();
        this._markUpdateComplete();
        this._component = null;
        this._prevComponent = null;
      }
    }]);
    return AnimatedComponent;
  }(React.Component);
  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {
    return (0, _jsxRuntime.jsx)(AnimatedComponent, _objectSpread(_objectSpread({}, props), ref == null ? null : {
      forwardedRef: ref
    }));
  });
}
module.exports = (_createAnimatedCompon = createAnimatedComponentInjection.recordAndRetrieve()) != null ? _createAnimatedCompon : createAnimatedComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eTIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jcmVhdGVDbGFzczIiLCJfaW5oZXJpdHMyIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yIiwiX2dldFByb3RvdHlwZU9mMiIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50SW5qZWN0aW9uIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfanN4UnVudGltZSIsIl9jcmVhdGVBbmltYXRlZENvbXBvbiIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0Iiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJmb3JFYWNoIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwicmVzdWx0IiwiTmV3VGFyZ2V0IiwiY29uc3RydWN0b3IiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiQm9vbGVhbiIsInZhbHVlT2YiLCJlIiwiVmlldyIsIl9yZXF1aXJlIiwiQW5pbWF0ZWRFdmVudCIsIkFuaW1hdGVkUHJvcHMiLCJSZWFjdCIsIk5hdGl2ZUFuaW1hdGVkSGVscGVyIiwiaW52YXJpYW50Iiwic2V0QW5kRm9yd2FyZFJlZiIsImFuaW1hdGVkQ29tcG9uZW50TmV4dElkIiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJDb21wb25lbnQiLCJpc1JlYWN0Q29tcG9uZW50IiwiQW5pbWF0ZWRDb21wb25lbnQiLCJfUmVhY3QkQ29tcG9uZW50IiwiX3N1cGVyIiwiX3RoaXMiLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImNvbmNhdCIsIl9pbnZva2VBbmltYXRlZFByb3BzQ2FsbGJhY2tPbk1vdW50IiwiX2V2ZW50RGV0YWNoZXJzIiwiX2FuaW1hdGVkQ29tcG9uZW50SWQiLCJfaXNGYWJyaWMiLCJfdGhpcyRfY29tcG9uZW50JF9pbnQiLCJfdGhpcyRfY29tcG9uZW50JF9pbnQyIiwiX3RoaXMkX2NvbXBvbmVudCRnZXROIiwiX3RoaXMkX2NvbXBvbmVudCRnZXROMiIsIl90aGlzJF9jb21wb25lbnQkZ2V0UyIsIl90aGlzJF9jb21wb25lbnQkZ2V0UzIiLCJfY29tcG9uZW50Iiwic3RhdGVOb2RlIiwiY2Fub25pY2FsIiwiZ2V0TmF0aXZlU2Nyb2xsUmVmIiwiZ2V0U2Nyb2xsUmVzcG9uZGVyIiwiX3dhaXRGb3JVcGRhdGUiLCJBUEkiLCJzZXRXYWl0aW5nRm9ySWRlbnRpZmllciIsIl9tYXJrVXBkYXRlQ29tcGxldGUiLCJ1bnNldFdhaXRpbmdGb3JJZGVudGlmaWVyIiwiX2FuaW1hdGVkUHJvcHNDYWxsYmFjayIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsInNldE5hdGl2ZVByb3BzIiwiZm9yY2VVcGRhdGUiLCJfcHJvcHNBbmltYXRlZCIsIl9faXNOYXRpdmUiLCJfX2dldEFuaW1hdGVkVmFsdWUiLCJFcnJvciIsIl9zZXRDb21wb25lbnRSZWYiLCJnZXRGb3J3YXJkZWRSZWYiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsInNldExvY2FsUmVmIiwicmVmIiwiX3ByZXZDb21wb25lbnQiLCJ2YWx1ZSIsIl9hdHRhY2hOYXRpdmVFdmVudHMiLCJfdGhpcyRfY29tcG9uZW50IiwiX3RoaXMyIiwic2Nyb2xsYWJsZU5vZGUiLCJnZXRTY3JvbGxhYmxlTm9kZSIsIl9sb29wIiwicHJvcCIsIl9fYXR0YWNoIiwiX19kZXRhY2giLCJfZGV0YWNoTmF0aXZlRXZlbnRzIiwicmVtb3ZlIiwiX2F0dGFjaFByb3BzIiwibmV4dFByb3BzIiwib2xkUHJvcHNBbmltYXRlZCIsIl9fcmVzdG9yZURlZmF1bHRWYWx1ZXMiLCJyZW5kZXIiLCJpbml0aWFsUHJvcHNJZkZhYnJpYyIsIl9pbml0aWFsQW5pbWF0ZWRQcm9wcyIsImFuaW1hdGVkUHJvcHMiLCJfX2dldFZhbHVlIiwiX2FuaW1hdGVkUHJvcHMkc3R5bGUiLCJzdHlsZSIsIl9yZWYiLCJwYXNzdGhyb3VnaEFuaW1hdGVkUHJvcEV4cGxpY2l0VmFsdWVzIiwiX3JlZiRzdHlsZSIsInBhc3N0aHJ1U3R5bGUiLCJwYXNzdGhydVByb3BzIiwibWVyZ2VkU3R5bGUiLCJqc3giLCJjb2xsYXBzYWJsZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnREaWRNb3VudCIsInNldE5hdGl2ZVZpZXciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5ld1Byb3BzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJmb3J3YXJkUmVmIiwiQW5pbWF0ZWRDb21wb25lbnRXcmFwcGVyIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlY29yZEFuZFJldHJpZXZlIl0sInNvdXJjZXMiOlsiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyBjcmVhdGVBbmltYXRlZENvbXBvbmVudEluamVjdGlvbiBmcm9tICcuL2NyZWF0ZUFuaW1hdGVkQ29tcG9uZW50SW5qZWN0aW9uJztcblxuY29uc3QgVmlldyA9IHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3Jyk7XG5jb25zdCB7QW5pbWF0ZWRFdmVudH0gPSByZXF1aXJlKCcuL0FuaW1hdGVkRXZlbnQnKTtcbmNvbnN0IEFuaW1hdGVkUHJvcHMgPSByZXF1aXJlKCcuL25vZGVzL0FuaW1hdGVkUHJvcHMnKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IE5hdGl2ZUFuaW1hdGVkSGVscGVyID0gcmVxdWlyZSgnLi9OYXRpdmVBbmltYXRlZEhlbHBlcicpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbmNvbnN0IHNldEFuZEZvcndhcmRSZWYgPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvc2V0QW5kRm9yd2FyZFJlZicpO1xuXG5sZXQgYW5pbWF0ZWRDb21wb25lbnROZXh0SWQgPSAxO1xuXG5leHBvcnQgdHlwZSBBbmltYXRlZENvbXBvbmVudFR5cGU8XG4gIC1Qcm9wczogeytbc3RyaW5nXTogbWl4ZWQsIC4uLn0sXG4gICtJbnN0YW5jZSA9IG1peGVkLFxuPiA9IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFxuICAkT2JqTWFwPFxuICAgIFByb3BzICZcbiAgICAgICRSZWFkT25seTx7XG4gICAgICAgIHBhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXM/OiBSZWFjdC5FbGVtZW50Q29uZmlnPFxuICAgICAgICAgIHR5cGVvZiBWaWV3LFxuICAgICAgICA+LFxuICAgICAgfT4sXG4gICAgKCkgPT4gYW55LFxuICA+LFxuICBJbnN0YW5jZSxcbj47XG5cbmZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50PFByb3BzOiB7K1tzdHJpbmddOiBtaXhlZCwgLi4ufSwgSW5zdGFuY2U+KFxuICBDb21wb25lbnQ6IFJlYWN0LkFic3RyYWN0Q29tcG9uZW50PFByb3BzLCBJbnN0YW5jZT4sXG4pOiBBbmltYXRlZENvbXBvbmVudFR5cGU8UHJvcHMsIEluc3RhbmNlPiB7XG4gIGludmFyaWFudChcbiAgICB0eXBlb2YgQ29tcG9uZW50ICE9PSAnZnVuY3Rpb24nIHx8XG4gICAgICAoQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpLFxuICAgICdgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnRgIGRvZXMgbm90IHN1cHBvcnQgc3RhdGVsZXNzIGZ1bmN0aW9uYWwgY29tcG9uZW50czsgJyArXG4gICAgICAndXNlIGEgY2xhc3MgY29tcG9uZW50IGluc3RlYWQuJyxcbiAgKTtcblxuICBjbGFzcyBBbmltYXRlZENvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxPYmplY3Q+IHtcbiAgICBfY29tcG9uZW50OiBhbnk7IC8vIFRPRE8gVDUzNzM4MTYxOiBmbG93IHR5cGUgdGhpcywgYW5kIHRoZSB3aG9sZSBmaWxlXG4gICAgX2ludm9rZUFuaW1hdGVkUHJvcHNDYWxsYmFja09uTW91bnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBfcHJldkNvbXBvbmVudDogYW55O1xuICAgIF9wcm9wc0FuaW1hdGVkOiBBbmltYXRlZFByb3BzO1xuICAgIF9ldmVudERldGFjaGVyczogQXJyYXk8RnVuY3Rpb24+ID0gW107XG4gICAgX2luaXRpYWxBbmltYXRlZFByb3BzOiBPYmplY3Q7XG5cbiAgICAvLyBPbmx5IHRvIGJlIHVzZWQgaW4gdGhpcyBmaWxlLCBhbmQgb25seSBpbiBGYWJyaWMuXG4gICAgX2FuaW1hdGVkQ29tcG9uZW50SWQ6IHN0cmluZyA9IGAke2FuaW1hdGVkQ29tcG9uZW50TmV4dElkKyt9OmFuaW1hdGVkQ29tcG9uZW50YDtcblxuICAgIF9hdHRhY2hOYXRpdmVFdmVudHMoKSB7XG4gICAgICAvLyBNYWtlIHN1cmUgdG8gZ2V0IHRoZSBzY3JvbGxhYmxlIG5vZGUgZm9yIGNvbXBvbmVudHMgdGhhdCBpbXBsZW1lbnRcbiAgICAgIC8vIGBTY3JvbGxSZXNwb25kZXIuTWl4aW5gLlxuICAgICAgY29uc3Qgc2Nyb2xsYWJsZU5vZGUgPSB0aGlzLl9jb21wb25lbnQ/LmdldFNjcm9sbGFibGVOb2RlXG4gICAgICAgID8gdGhpcy5fY29tcG9uZW50LmdldFNjcm9sbGFibGVOb2RlKClcbiAgICAgICAgOiB0aGlzLl9jb21wb25lbnQ7XG5cbiAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucHJvcHMpIHtcbiAgICAgICAgY29uc3QgcHJvcCA9IHRoaXMucHJvcHNba2V5XTtcbiAgICAgICAgaWYgKHByb3AgaW5zdGFuY2VvZiBBbmltYXRlZEV2ZW50ICYmIHByb3AuX19pc05hdGl2ZSkge1xuICAgICAgICAgIHByb3AuX19hdHRhY2goc2Nyb2xsYWJsZU5vZGUsIGtleSk7XG4gICAgICAgICAgdGhpcy5fZXZlbnREZXRhY2hlcnMucHVzaCgoKSA9PiBwcm9wLl9fZGV0YWNoKHNjcm9sbGFibGVOb2RlLCBrZXkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIF9kZXRhY2hOYXRpdmVFdmVudHMoKSB7XG4gICAgICB0aGlzLl9ldmVudERldGFjaGVycy5mb3JFYWNoKHJlbW92ZSA9PiByZW1vdmUoKSk7XG4gICAgICB0aGlzLl9ldmVudERldGFjaGVycyA9IFtdO1xuICAgIH1cblxuICAgIF9pc0ZhYnJpYyA9ICgpOiBib29sZWFuID0+IHtcbiAgICAgIC8vIFdoZW4gY2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgcmVuZGVyLCBgX2NvbXBvbmVudGAgaXMgYWx3YXlzIG51bGwuXG4gICAgICAvLyBUaGVyZWZvcmUsIGV2ZW4gaWYgYSBjb21wb25lbnQgaXMgcmVuZGVyZWQgaW4gRmFicmljLCB3ZSBjYW4ndCBkZXRlY3RcbiAgICAgIC8vIHRoYXQgdW50aWwgcmVmIGlzIHNldCwgd2hpY2ggaGFwcGVucyBzb21ldGltZSBhZnRlciB0aGUgZmlyc3QgcmVuZGVyLlxuICAgICAgLy8gSW4gY2FzZXMgd2hlcmUgdGhpcyB2YWx1ZSBzd2l0Y2hpbmcgYmV0d2VlbiBcImZhbHNlXCIgYW5kIFwidHJ1ZVwiIG9uIEZhYnJpY1xuICAgICAgLy8gY2F1c2VzIGlzc3VlcywgYWRkIGFuIGFkZGl0aW9uYWwgY2hlY2sgZm9yIF9jb21wb25lbnQgbnVsbGl0eS5cbiAgICAgIGlmICh0aGlzLl9jb21wb25lbnQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gKFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZG90LW5vdGF0aW9uXG4gICAgICAgIHRoaXMuX2NvbXBvbmVudFsnX2ludGVybmFsSW5zdGFuY2VIYW5kbGUnXT8uc3RhdGVOb2RlPy5jYW5vbmljYWwgIT1cbiAgICAgICAgICBudWxsIHx8XG4gICAgICAgIC8vIFNvbWUgY29tcG9uZW50cyBoYXZlIGEgc2V0TmF0aXZlUHJvcHMgZnVuY3Rpb24gYnV0IGFyZW4ndCBhIGhvc3QgY29tcG9uZW50XG4gICAgICAgIC8vIHN1Y2ggYXMgbGlzdHMgbGlrZSBGbGF0TGlzdCBhbmQgU2VjdGlvbkxpc3QuIFRoZXNlIHNob3VsZCBhbHNvIHVzZVxuICAgICAgICAvLyBmb3JjZVVwZGF0ZSBpbiBGYWJyaWMgc2luY2Ugc2V0TmF0aXZlUHJvcHMgZG9lc24ndCBleGlzdCBvbiB0aGUgdW5kZXJseWluZ1xuICAgICAgICAvLyBob3N0IGNvbXBvbmVudC4gVGhpcyBjcmF6eSBoYWNrIGlzIGVzc2VudGlhbGx5IHNwZWNpYWwgY2FzaW5nIHRob3NlIGxpc3RzIGFuZFxuICAgICAgICAvLyBTY3JvbGxWaWV3IGl0c2VsZiB0byB1c2UgZm9yY2VVcGRhdGUgaW4gRmFicmljLlxuICAgICAgICAvLyBJZiB0aGVzZSBjb21wb25lbnRzIGVuZCB1cCB1c2luZyBmb3J3YXJkUmVmIHRoZW4gdGhlc2UgaGFja3MgY2FuIGdvIGF3YXlcbiAgICAgICAgLy8gYXMgdGhpcy5fY29tcG9uZW50IHdvdWxkIGFjdHVhbGx5IGJlIHRoZSB1bmRlcmx5aW5nIGhvc3QgY29tcG9uZW50IGFuZCB0aGUgYWJvdmUgY2hlY2tcbiAgICAgICAgLy8gd291bGQgYmUgc3VmZmljaWVudC5cbiAgICAgICAgKHRoaXMuX2NvbXBvbmVudC5nZXROYXRpdmVTY3JvbGxSZWYgIT0gbnVsbCAmJlxuICAgICAgICAgIHRoaXMuX2NvbXBvbmVudC5nZXROYXRpdmVTY3JvbGxSZWYoKSAhPSBudWxsICYmXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgICAgIHRoaXMuX2NvbXBvbmVudC5nZXROYXRpdmVTY3JvbGxSZWYoKVsnX2ludGVybmFsSW5zdGFuY2VIYW5kbGUnXVxuICAgICAgICAgICAgPy5zdGF0ZU5vZGU/LmNhbm9uaWNhbCAhPSBudWxsKSB8fFxuICAgICAgICAodGhpcy5fY29tcG9uZW50LmdldFNjcm9sbFJlc3BvbmRlciAhPSBudWxsICYmXG4gICAgICAgICAgdGhpcy5fY29tcG9uZW50LmdldFNjcm9sbFJlc3BvbmRlcigpICE9IG51bGwgJiZcbiAgICAgICAgICB0aGlzLl9jb21wb25lbnQuZ2V0U2Nyb2xsUmVzcG9uZGVyKCkuZ2V0TmF0aXZlU2Nyb2xsUmVmICE9IG51bGwgJiZcbiAgICAgICAgICB0aGlzLl9jb21wb25lbnQuZ2V0U2Nyb2xsUmVzcG9uZGVyKCkuZ2V0TmF0aXZlU2Nyb2xsUmVmKCkgIT0gbnVsbCAmJlxuICAgICAgICAgIHRoaXMuX2NvbXBvbmVudC5nZXRTY3JvbGxSZXNwb25kZXIoKS5nZXROYXRpdmVTY3JvbGxSZWYoKVtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkb3Qtbm90YXRpb25cbiAgICAgICAgICAgICdfaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSdcbiAgICAgICAgICBdPy5zdGF0ZU5vZGU/LmNhbm9uaWNhbCAhPSBudWxsKVxuICAgICAgKTtcbiAgICB9O1xuXG4gICAgX3dhaXRGb3JVcGRhdGUgPSAoKTogdm9pZCA9PiB7XG4gICAgICBpZiAodGhpcy5faXNGYWJyaWMoKSkge1xuICAgICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIoXG4gICAgICAgICAgdGhpcy5fYW5pbWF0ZWRDb21wb25lbnRJZCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX21hcmtVcGRhdGVDb21wbGV0ZSA9ICgpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc0ZhYnJpYygpKSB7XG4gICAgICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS51bnNldFdhaXRpbmdGb3JJZGVudGlmaWVyKFxuICAgICAgICAgIHRoaXMuX2FuaW1hdGVkQ29tcG9uZW50SWQsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFRoZSBzeXN0ZW0gaXMgYmVzdCBkZXNpZ25lZCB3aGVuIHNldE5hdGl2ZVByb3BzIGlzIGltcGxlbWVudGVkLiBJdCBpc1xuICAgIC8vIGFibGUgdG8gYXZvaWQgcmUtcmVuZGVyaW5nIGFuZCBkaXJlY3RseSBzZXQgdGhlIGF0dHJpYnV0ZXMgdGhhdCBjaGFuZ2VkLlxuICAgIC8vIEhvd2V2ZXIsIHNldE5hdGl2ZVByb3BzIGNhbiBvbmx5IGJlIGltcGxlbWVudGVkIG9uIGxlYWYgbmF0aXZlXG4gICAgLy8gY29tcG9uZW50cy4gSWYgeW91IHdhbnQgdG8gYW5pbWF0ZSBhIGNvbXBvc2l0ZSBjb21wb25lbnQsIHlvdSBuZWVkIHRvXG4gICAgLy8gcmUtcmVuZGVyIGl0LiBJbiB0aGlzIGNhc2UsIHdlIGhhdmUgYSBmYWxsYmFjayB0aGF0IHVzZXMgZm9yY2VVcGRhdGUuXG4gICAgLy8gVGhpcyBmYWxsYmFjayBpcyBhbHNvIGNhbGxlZCBpbiBGYWJyaWMuXG4gICAgX2FuaW1hdGVkUHJvcHNDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb21wb25lbnQgPT0gbnVsbCkge1xuICAgICAgICAvLyBBbmltYXRlZFByb3BzIGlzIGNyZWF0ZWQgaW4gd2lsbC1tb3VudCBiZWNhdXNlIGl0J3MgdXNlZCBpbiByZW5kZXIuXG4gICAgICAgIC8vIEJ1dCB0aGlzIGNhbGxiYWNrIG1heSBiZSBpbnZva2VkIGJlZm9yZSBtb3VudCBpbiBhc3luYyBtb2RlLFxuICAgICAgICAvLyBJbiB3aGljaCBjYXNlIHdlIHNob3VsZCBkZWZlciB0aGUgc2V0TmF0aXZlUHJvcHMoKSBjYWxsLlxuICAgICAgICAvLyBSZWFjdCBtYXkgdGhyb3cgYXdheSB1bmNvbW1pdHRlZCB3b3JrIGluIGFzeW5jIG1vZGUsXG4gICAgICAgIC8vIFNvIGEgZGVmZXJyZWQgY2FsbCB3b24ndCBhbHdheXMgYmUgaW52b2tlZC5cbiAgICAgICAgdGhpcy5faW52b2tlQW5pbWF0ZWRQcm9wc0NhbGxiYWNrT25Nb3VudCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnIHx8XG4gICAgICAgIC8vIEZvciBhbmltYXRpbmcgcHJvcGVydGllcyBvZiBub24tbGVhZi9ub24tbmF0aXZlIGNvbXBvbmVudHNcbiAgICAgICAgdHlwZW9mIHRoaXMuX2NvbXBvbmVudC5zZXROYXRpdmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAvLyBJbiBGYWJyaWMsIGZvcmNlIGFuaW1hdGlvbnMgdG8gZ28gdGhyb3VnaCBmb3JjZVVwZGF0ZSBhbmQgc2tpcCBzZXROYXRpdmVQcm9wc1xuICAgICAgICB0aGlzLl9pc0ZhYnJpYygpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5fcHJvcHNBbmltYXRlZC5fX2lzTmF0aXZlKSB7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudC5zZXROYXRpdmVQcm9wcyhcbiAgICAgICAgICB0aGlzLl9wcm9wc0FuaW1hdGVkLl9fZ2V0QW5pbWF0ZWRWYWx1ZSgpLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdBdHRlbXB0aW5nIHRvIHJ1biBKUyBkcml2ZW4gYW5pbWF0aW9uIG9uIGFuaW1hdGVkICcgK1xuICAgICAgICAgICAgJ25vZGUgdGhhdCBoYXMgYmVlbiBtb3ZlZCB0byBcIm5hdGl2ZVwiIGVhcmxpZXIgYnkgc3RhcnRpbmcgYW4gJyArXG4gICAgICAgICAgICAnYW5pbWF0aW9uIHdpdGggYHVzZU5hdGl2ZURyaXZlcjogdHJ1ZWAnLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfYXR0YWNoUHJvcHMobmV4dFByb3BzOiBhbnkpIHtcbiAgICAgIGNvbnN0IG9sZFByb3BzQW5pbWF0ZWQgPSB0aGlzLl9wcm9wc0FuaW1hdGVkO1xuXG4gICAgICB0aGlzLl9wcm9wc0FuaW1hdGVkID0gbmV3IEFuaW1hdGVkUHJvcHMoXG4gICAgICAgIG5leHRQcm9wcyxcbiAgICAgICAgdGhpcy5fYW5pbWF0ZWRQcm9wc0NhbGxiYWNrLFxuICAgICAgKTtcbiAgICAgIHRoaXMuX3Byb3BzQW5pbWF0ZWQuX19hdHRhY2goKTtcblxuICAgICAgLy8gV2hlbiB5b3UgY2FsbCBkZXRhY2gsIGl0IHJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgcGFyZW50IGxpc3RcbiAgICAgIC8vIG9mIGNoaWxkcmVuLiBJZiBpdCBnb2VzIHRvIDAsIHRoZW4gdGhlIHBhcmVudCBhbHNvIGRldGFjaGVzIGl0c2VsZlxuICAgICAgLy8gYW5kIHNvIG9uLlxuICAgICAgLy8gQW4gb3B0aW1pemF0aW9uIGlzIHRvIGF0dGFjaCB0aGUgbmV3IGVsZW1lbnRzIGFuZCBUSEVOIGRldGFjaCB0aGUgb2xkXG4gICAgICAvLyBvbmVzIGluc3RlYWQgb2YgZGV0YWNoaW5nIGFuZCBUSEVOIGF0dGFjaGluZy5cbiAgICAgIC8vIFRoaXMgd2F5IHRoZSBpbnRlcm1lZGlhdGUgc3RhdGUgaXNuJ3QgdG8gZ28gdG8gMCBhbmQgdHJpZ2dlclxuICAgICAgLy8gdGhpcyBleHBlbnNpdmUgcmVjdXJzaXZlIGRldGFjaGluZyB0byB0aGVuIHJlLWF0dGFjaCBldmVyeXRoaW5nIG9uXG4gICAgICAvLyB0aGUgdmVyeSBuZXh0IG9wZXJhdGlvbi5cbiAgICAgIGlmIChvbGRQcm9wc0FuaW1hdGVkKSB7XG4gICAgICAgIG9sZFByb3BzQW5pbWF0ZWQuX19yZXN0b3JlRGVmYXVsdFZhbHVlcygpO1xuICAgICAgICBvbGRQcm9wc0FuaW1hdGVkLl9fZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3NldENvbXBvbmVudFJlZiA9IHNldEFuZEZvcndhcmRSZWYoe1xuICAgICAgZ2V0Rm9yd2FyZGVkUmVmOiAoKSA9PiB0aGlzLnByb3BzLmZvcndhcmRlZFJlZixcbiAgICAgIHNldExvY2FsUmVmOiByZWYgPT4ge1xuICAgICAgICB0aGlzLl9wcmV2Q29tcG9uZW50ID0gdGhpcy5fY29tcG9uZW50O1xuICAgICAgICB0aGlzLl9jb21wb25lbnQgPSByZWY7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xuICAgICAgLy8gV2hlbiByZW5kZXJpbmcgaW4gRmFicmljIGFuZCBhbiBBbmltYXRlZFZhbHVlIGlzIHVzZWQsIHdlIGtlZXAgdHJhY2sgb2ZcbiAgICAgIC8vIHRoZSBpbml0aWFsIHZhbHVlIG9mIHRoYXQgVmFsdWUsIHRvIGF2b2lkIGFkZGl0aW9uYWwgcHJvcCB1cGRhdGVzIHdoZW5cbiAgICAgIC8vIHRoaXMgY29tcG9uZW50IHJlLXJlbmRlcnNcbiAgICAgIGNvbnN0IGluaXRpYWxQcm9wc0lmRmFicmljID0gdGhpcy5faXNGYWJyaWMoKVxuICAgICAgICA/IHRoaXMuX2luaXRpYWxBbmltYXRlZFByb3BzXG4gICAgICAgIDogbnVsbDtcblxuICAgICAgY29uc3QgYW5pbWF0ZWRQcm9wcyA9XG4gICAgICAgIHRoaXMuX3Byb3BzQW5pbWF0ZWQuX19nZXRWYWx1ZShpbml0aWFsUHJvcHNJZkZhYnJpYykgfHwge307XG4gICAgICBpZiAoIXRoaXMuX2luaXRpYWxBbmltYXRlZFByb3BzKSB7XG4gICAgICAgIHRoaXMuX2luaXRpYWxBbmltYXRlZFByb3BzID0gYW5pbWF0ZWRQcm9wcztcbiAgICAgIH1cblxuICAgICAgY29uc3Qge3N0eWxlID0ge30sIC4uLnByb3BzfSA9IGFuaW1hdGVkUHJvcHM7XG4gICAgICBjb25zdCB7c3R5bGU6IHBhc3N0aHJ1U3R5bGUgPSB7fSwgLi4ucGFzc3RocnVQcm9wc30gPVxuICAgICAgICB0aGlzLnByb3BzLnBhc3N0aHJvdWdoQW5pbWF0ZWRQcm9wRXhwbGljaXRWYWx1ZXMgfHwge307XG4gICAgICBjb25zdCBtZXJnZWRTdHlsZSA9IHsuLi5zdHlsZSwgLi4ucGFzc3RocnVTdHlsZX07XG5cbiAgICAgIC8vIEZvcmNlIGBjb2xsYXBzYWJsZWAgdG8gYmUgZmFsc2Ugc28gdGhhdCBuYXRpdmUgdmlldyBpcyBub3QgZmxhdHRlbmVkLlxuICAgICAgLy8gRmxhdHRlbmVkIHZpZXdzIGNhbm5vdCBiZSBhY2N1cmF0ZWx5IHJlZmVyZW5jZWQgYnkgYSBuYXRpdmUgZHJpdmVyLlxuICAgICAgcmV0dXJuIChcbiAgICAgICAgPENvbXBvbmVudFxuICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICB7Li4ucGFzc3RocnVQcm9wc31cbiAgICAgICAgICBjb2xsYXBzYWJsZT17ZmFsc2V9XG4gICAgICAgICAgc3R5bGU9e21lcmdlZFN0eWxlfVxuICAgICAgICAgIHJlZj17dGhpcy5fc2V0Q29tcG9uZW50UmVmfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9XG5cbiAgICBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgdGhpcy5fd2FpdEZvclVwZGF0ZSgpO1xuICAgICAgdGhpcy5fYXR0YWNoUHJvcHModGhpcy5wcm9wcyk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5faW52b2tlQW5pbWF0ZWRQcm9wc0NhbGxiYWNrT25Nb3VudCkge1xuICAgICAgICB0aGlzLl9pbnZva2VBbmltYXRlZFByb3BzQ2FsbGJhY2tPbk1vdW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2FuaW1hdGVkUHJvcHNDYWxsYmFjaygpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wcm9wc0FuaW1hdGVkLnNldE5hdGl2ZVZpZXcodGhpcy5fY29tcG9uZW50KTtcbiAgICAgIHRoaXMuX2F0dGFjaE5hdGl2ZUV2ZW50cygpO1xuICAgICAgdGhpcy5fbWFya1VwZGF0ZUNvbXBsZXRlKCk7XG4gICAgfVxuXG4gICAgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV3UHJvcHM6IGFueSkge1xuICAgICAgdGhpcy5fd2FpdEZvclVwZGF0ZSgpO1xuICAgICAgdGhpcy5fYXR0YWNoUHJvcHMobmV3UHJvcHMpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IGFueSkge1xuICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudCAhPT0gdGhpcy5fcHJldkNvbXBvbmVudCkge1xuICAgICAgICB0aGlzLl9wcm9wc0FuaW1hdGVkLnNldE5hdGl2ZVZpZXcodGhpcy5fY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9jb21wb25lbnQgIT09IHRoaXMuX3ByZXZDb21wb25lbnQgfHwgcHJldlByb3BzICE9PSB0aGlzLnByb3BzKSB7XG4gICAgICAgIHRoaXMuX2RldGFjaE5hdGl2ZUV2ZW50cygpO1xuICAgICAgICB0aGlzLl9hdHRhY2hOYXRpdmVFdmVudHMoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX21hcmtVcGRhdGVDb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5fcHJvcHNBbmltYXRlZCAmJiB0aGlzLl9wcm9wc0FuaW1hdGVkLl9fZGV0YWNoKCk7XG4gICAgICB0aGlzLl9kZXRhY2hOYXRpdmVFdmVudHMoKTtcbiAgICAgIHRoaXMuX21hcmtVcGRhdGVDb21wbGV0ZSgpO1xuICAgICAgdGhpcy5fY29tcG9uZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3ByZXZDb21wb25lbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEFuaW1hdGVkQ29tcG9uZW50V3JhcHBlcihwcm9wcywgcmVmKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxBbmltYXRlZENvbXBvbmVudFxuICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgIHsuLi4ocmVmID09IG51bGwgPyBudWxsIDoge2ZvcndhcmRlZFJlZjogcmVmfSl9XG4gICAgICAvPlxuICAgICk7XG4gIH0pO1xufVxuXG4vLyAkRmxvd0lnbm9yZVtpbmNvbXBhdGlibGUtY2FzdF0gLSBXaWxsIGJlIGNvbXBhdGlibGUgYWZ0ZXIgcmVmYWN0b3JzLlxubW9kdWxlLmV4cG9ydHMgPSAoY3JlYXRlQW5pbWF0ZWRDb21wb25lbnRJbmplY3Rpb24ucmVjb3JkQW5kUmV0cmlldmUoKSA/P1xuICBjcmVhdGVBbmltYXRlZENvbXBvbmVudDogdHlwZW9m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