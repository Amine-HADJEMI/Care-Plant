9d298c024a65b2e11aaf65cf8e60630b
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Login;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Login(_ref) {
  var navigation = _ref.navigation;
  var _useState = (0, _react.useState)(""),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    email = _useState2[0],
    setEmail = _useState2[1];
  var _useState3 = (0, _react.useState)(""),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    password = _useState4[0],
    setPassword = _useState4[1];
  var _useState5 = (0, _react.useState)(null),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    errorMessage = _useState6[0],
    setErrorMessage = _useState6[1];
  _axios.default.defaults.baseURL = 'http://localhost:3000/';
  var loginSuccess = function loginSuccess(email, password) {
    _axios.default.post('/login', {
      email: email,
      password: password
    }).then(function (response) {
      if (response.data.status === 60) {
        console.log('invalid email or password');
        setErrorMessage('invalid email or password');
      } else if (response.data.status === 50) {
        navigation.navigate('Home');
        setErrorMessage(null);
      }
      console.log('reponse', response.data);
    }).catch(function (error) {
      console.log(error.response.data.message);
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
      source: require("../assets/arosa-je.png"),
      style: styles.logo
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.inputView,
      children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: styles.TextInput,
        placeholder: "Adresse email",
        placeholderTextColor: "#003f5c",
        onChangeText: function onChangeText(email) {
          return setEmail(email);
        }
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.inputView,
      children: (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        style: styles.TextInput,
        placeholder: "Mot de passe top secret",
        placeholderTextColor: "#003f5c",
        secureTextEntry: true,
        onChangeText: function onChangeText(password) {
          return setPassword(password);
        }
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.mdpBtn,
      onPress: function onPress() {
        return navigation.navigate('ForgetPassword');
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.loginText,
        children: "Mot de passe oubli\xE9"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.loginBtn,
      onPress: function onPress() {
        return loginSuccess(email, password);
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.loginText,
        children: "Connexion"
      })
    }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
      style: styles.signUpBtn,
      onPress: function onPress() {
        return navigation.navigate('Signup');
      },
      children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
        style: styles.loginText,
        children: "Vous n'avez pas de compte?"
      })
    }), errorMessage && (0, _jsxRuntime.jsx)(_reactNative.Text, {
      style: styles.errorStyle,
      children: "INVALID E-MAIL OR PASSWORD"
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center"
  },
  logo: {
    width: 260,
    height: 130,
    marginBottom: 70
  },
  image: {
    marginBottom: 40,
    maxWidth: "50%"
  },
  inputView: {
    backgroundColor: "#A1E79F",
    borderRadius: 30,
    border: 'solid #8FCD8D',
    width: "70%",
    height: 45,
    marginBottom: 20,
    alignItems: "center",
    maxWidth: 400
  },
  TextInput: {
    borderRadius: 30,
    height: 50,
    flex: 1,
    padding: 5,
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    width: "100%"
  },
  mdpBtn: {
    height: 20,
    marginBottom: 10,
    color: "#000",
    backgroundColor: "#fff",
    fontSize: "small"
  },
  signUpBtn: {
    height: 30,
    marginBottom: 40,
    marginTop: 10,
    color: "#000",
    backgroundColor: "#fff",
    fontSize: "small"
  },
  loginBtn: {
    width: "80%",
    borderRadius: 25,
    height: 50,
    alignItems: "center",
    justifyContent: "center",
    marginTop: 40,
    backgroundColor: "#66D163",
    maxWidth: 500
  },
  loginText: {
    fontSize: "larger",
    fontWeight: "bold"
  },
  errorStyle: {
    color: "red"
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,